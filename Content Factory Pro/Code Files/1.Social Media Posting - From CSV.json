{
  "name": "1.Social Media Posting - From CSV",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Prepare Dynamic Data').item.json.contentBrief }}",
        "options": {
          "systemMessage": "={{ $('Prepare Dynamic Data').item.json.systemMessage }}"
        }
      },
      "id": "c2dab9a5-9244-4fb6-8e06-3ff6d5eaf4e3",
      "name": "GENERATE TEXT",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1312,
        32
      ],
      "typeVersion": 1.8,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create an image prompt for: {{ $('Prepare Dynamic Data').item.json.specificTopic }}\n\nBusiness: {{ $('Prepare Dynamic Data').item.json.businessName }}\nBusiness Category: {{ $('Prepare Dynamic Data').item.json.businessCategory }}\nContent Type: {{ $('Prepare Dynamic Data').item.json.socialContentType }}\n\nGenerate a specific image prompt that visually represents this exact topic, not generic business scenes.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=// Dynamic Image Prompt Generator - Replace your hardcoded GENERATE PROMPT system message\n\nconst dynamicData = $('Prepare Dynamic Data').item.json;\nconst businessCategory = dynamicData.businessCategory || '';\nconst specificTopic = dynamicData.specificTopic || '';\nconst businessName = dynamicData.businessName || '';\n\nconsole.log('=== DYNAMIC IMAGE PROMPT GENERATION ===');\nconsole.log('Business Category:', businessCategory);\nconsole.log('Specific Topic:', specificTopic);\nconsole.log('Business Name:', businessName);\n\n// UNIVERSAL TOPIC ANALYSIS (works for any business)\nfunction analyzeTopicForImageStyle(topic) {\n  const topicLower = topic.toLowerCase();\n  \n  if (topicLower.includes('choose') || topicLower.includes('select') || topicLower.includes('comparison')) {\n    return 'product comparison/selection imagery with multiple options displayed side by side';\n  }\n  \n  if (topicLower.includes('how to') || topicLower.includes('guide') || topicLower.includes('tutorial')) {\n    return 'step-by-step instructional imagery showing process stages';\n  }\n  \n  if (topicLower.includes('maintenance') || topicLower.includes('care') || topicLower.includes('maintain')) {\n    return 'maintenance process photography with tools and equipment';\n  }\n  \n  if (topicLower.includes('safety') || topicLower.includes('protection') || topicLower.includes('secure')) {\n    return 'safety demonstration imagery with proper protective equipment';\n  }\n  \n  if (topicLower.includes('beginner') || topicLower.includes('starter') || topicLower.includes('youth')) {\n    return 'beginner-friendly educational setup with clear, simple presentation';\n  }\n  \n  if (topicLower.includes('training') || topicLower.includes('technique') || topicLower.includes('skill')) {\n    return 'professional training demonstration with expert guidance';\n  }\n  \n  if (topicLower.includes('problem') || topicLower.includes('issue') || topicLower.includes('troubleshoot')) {\n    return 'problem diagnosis and solution imagery';\n  }\n  \n  if (topicLower.includes('benefit') || topicLower.includes('advantage') || topicLower.includes('value')) {\n    return 'before/after or benefit demonstration imagery';\n  }\n  \n  // Default for any topic\n  return 'professional demonstration of the topic with relevant tools and environment';\n}\n\n// DYNAMIC BUSINESS CATEGORY MAPPING\nfunction getBusinessImageContext(category) {\n  // Create mappings for known categories\n  const knownCategories = {\n    'Sports Coaching & Training': 'professional football training environment',\n    'Sports Consultancy': 'professional football session plan or resource plan',\n    'Automotive': 'modern automotive workshop/garage setting',\n    'Plumbing': 'professional plumbing installation environment or bathroom installation', \n    'Electrical': 'electrical work setting with safety equipment',\n    'Food Service': 'commercial kitchen/culinary environment',\n    'Travel & Cruise': 'travel destination/cruise setting, must be Royal Caribbean brand',\n    'Car Valeting': 'automotive detailing and cleaning environment on a household drive or street next to house',\n    'Mortgage & Property': 'professional office consultation setting or home visit from property consultant',\n    'Property': 'professional property/real estate environment',\n    'Financial Services': 'professional financial consultation setting or home visit from consultant',\n    'Cleaning Services': 'professional cleaning service environment'\n  };\n  \n  // Return specific mapping if found\n  if (knownCategories[category]) {\n    return knownCategories[category];\n  }\n  \n  // SMART FALLBACK: Analyze category words\n  const categoryLower = category.toLowerCase();\n  \n  if (categoryLower.includes('automotive') || categoryLower.includes('car') || categoryLower.includes('vehicle')) {\n    return 'automotive service environment';\n  }\n  \n  if (categoryLower.includes('property') || categoryLower.includes('real estate') || categoryLower.includes('mortgage')) {\n    return 'professional property/real estate setting';\n  }\n  \n  if (categoryLower.includes('cleaning') || categoryLower.includes('valeting') || categoryLower.includes('maintenance')) {\n    return 'professional cleaning/maintenance environment';\n  }\n  \n  if (categoryLower.includes('coaching') || categoryLower.includes('training') || categoryLower.includes('education')) {\n    return 'professional training/education environment';\n  }\n  \n  if (categoryLower.includes('food') || categoryLower.includes('catering') || categoryLower.includes('restaurant')) {\n    return 'culinary/food service environment';\n  }\n  \n  if (categoryLower.includes('travel') || categoryLower.includes('cruise') || categoryLower.includes('tourism')) {\n    return 'travel/destination setting';\n  }\n  \n  if (categoryLower.includes('financial') || categoryLower.includes('accounting') || categoryLower.includes('consulting')) {\n    return 'professional office consultation environment';\n  }\n  \n  // Universal fallback for unknown categories\n  return 'professional business environment with industry-appropriate tools and setting';\n}\n\n// GENERATE DYNAMIC SYSTEM MESSAGE\nconst topicImageStyle = analyzeTopicForImageStyle(specificTopic);\nconst businessImageContext = getBusinessImageContext(businessCategory);\n\nconst dynamicSystemMessage = `You are an expert at creating specific image prompts based on user topics and business context.\n\nCRITICAL: Create image prompts that match the SPECIFIC TOPIC provided, not generic business imagery.\n\nCURRENT REQUEST:\n- Business: ${businessName}\n- Category: ${businessCategory}  \n- Topic: ${specificTopic}\n\nTOPIC-BASED IMAGE STYLE:\n${topicImageStyle}\n\nBUSINESS CONTEXT:\n${businessImageContext}\n\nUNIVERSAL PROMPT CREATION RULES:\n- Focus on the SPECIFIC TOPIC \"${specificTopic}\", not generic business scenes\n- Use ${businessImageContext} as the setting/environment\n- Apply ${topicImageStyle} as the main approach\n- Include professional, high-quality imagery descriptions\n- Show relevant tools, equipment, or materials for this business type\n- Create educational/informative visual layouts when appropriate\n- End with: \", no text or logos\"\n- Keep under 950 characters\n- Make it industry-appropriate but topic-specific\n\nDYNAMIC EXAMPLE FOR YOUR REQUEST:\nTopic: \"${specificTopic}\"\nBusiness Context: ${businessImageContext}\nImage Style: ${topicImageStyle}\n\nCreate a prompt that combines these elements naturally and professionally.\n\nOUTPUT REQUIREMENTS:\n- Topic-specific imagery (not generic business photos)\n- Industry-appropriate setting (${businessImageContext})\n- Professional quality description\n- Minimal text or logos, unless you have access to the businesses logo via a reliable online source like the business website.  If you are using text, please ensure the correct spelling is used.\n- Under 950 characters`;\n\nconsole.log('✅ Dynamic system message generated');\nconsole.log('Topic Analysis:', topicImageStyle);\nconsole.log('Business Context:', businessImageContext);\nconsole.log('Message Length:', dynamicSystemMessage.length);\n\nreturn {\n  json: {\n    dynamicSystemMessage: dynamicSystemMessage,\n    topicAnalysis: topicImageStyle,\n    businessContext: businessImageContext,\n    \n    // For debugging and improvement\n    categoryMapped: businessCategory,\n    topicMapped: specificTopic,\n    fallbackUsed: !['Sports Coaching & Training', 'Automotive', 'Plumbing', 'Electrical', 'Food Service', 'Travel & Cruise'].includes(businessCategory),\n    \n    // Track new categories for future enhancement\n    newCategoryDetected: !knownCategories[businessCategory],\n    suggestedCategoryMapping: businessImageContext\n  }\n};"
        }
      },
      "id": "6e9806ce-cba7-4078-ac91-83bb0791b436",
      "name": "GENERATE PROMPT",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        3104,
        32
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "resource": "image",
        "model": "gpt-image-1",
        "prompt": "={{ $('GENERATE PROMPT').item.json.output }}, minimal text or logos, unless you have access to the businesses logo via a reliable online source like the business website.  If you are using text, please ensure the correct spelling is used.",
        "options": {
          "quality": "medium",
          "size": "1024x1024"
        }
      },
      "id": "fdd92911-d166-4248-a6b5-aa9bae2e4c29",
      "name": "OPENAI GENERATES IMAGE",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        3568,
        256
      ],
      "typeVersion": 1.8,
      "credentials": {
        "openAiApi": {
          "id": "4mFG6JwySFJg6M6W",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        1248,
        224
      ],
      "id": "fd9b077e-cc69-4239-a506-4feb22fdbf2d",
      "name": "Anthropic Chat Model1",
      "credentials": {
        "anthropicApi": {
          "id": "HeH56rgJOcdcDo42",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        3104,
        224
      ],
      "id": "30e30f2d-a1b8-487a-9034-d9d5924efea5",
      "name": "Anthropic Chat Model2",
      "credentials": {
        "anthropicApi": {
          "id": "HeH56rgJOcdcDo42",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "20ed14ad-2042-8041-94a1-d732d174e720",
          "mode": "list",
          "cachedResultName": "Business_Configurations",
          "cachedResultUrl": "https://www.notion.so/20ed14ad2042804194a1d732d174e720"
        },
        "simple": false,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active Status|checkbox",
              "condition": "equals",
              "checkboxValue": true
            },
            {
              "key": "Title|title",
              "condition": "equals",
              "titleValue": "={{ $('Process Form Data').item.json.selectedBusinessName }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2000,
        -240
      ],
      "id": "8cbda7af-4c49-4873-89c6-5abd97735ee9",
      "name": "Get Business Config",
      "credentials": {
        "notionApi": {
          "id": "Ka245NO86DdDotyG",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// FIXED Prepare Dynamic Data Node - CORRECT JSON EXTRACTION\n// Properly extracts from form submission JSON and business config separately\n\nconsole.log('=== PROCESSING FORM-SUBMITTED CONTENT (CORRECT JSON EXTRACTION) ===');\n\n// Get the form submission data (from Process Form Data node)\n//const formSubmissionData = $json;\nconst formSubmissionData = $('On form submission').first().json; // Gets data directly from form\nconsole.log('Form submission data received:', formSubmissionData);\n\n// Get business configuration data (separate from form data)\nconst businessConfigs = $('Get Business Config').all();\n\nif (!businessConfigs || businessConfigs.length === 0) {\n  console.log(`❌ ERROR: No business configuration found for: \"${formSubmissionData.selectedBusinessName || formSubmissionData['Business Name']}\"`);\n  return [{ \n    json: { \n      error: 'Business config not found or inactive', \n      selectedBusinessName: formSubmissionData.selectedBusinessName || formSubmissionData['Business Name'],\n      skip: true,\n      reason: `Business not found or inactive in Business Configuration database`\n    } \n  }];\n}\n\n// Get the first/only business config\nconst businessConfig = businessConfigs[0];\nconst selectedBusinessId = businessConfig.json.id;\nconst foundBusinessName = businessConfig.json.properties?.Title?.title?.[0]?.plain_text;\n\nconsole.log('✅ BUSINESS CONFIG LOADED:');\nconsole.log(`  Business Name: \"${foundBusinessName}\"`);\nconsole.log(`  Business ID: ${selectedBusinessId}`);\n\n// Check if business is active\nconst isBusinessActive = businessConfig.json.properties?.['Active Status']?.checkbox;\n\nif (!isBusinessActive) {\n  console.log(`🚫 SKIPPING INACTIVE BUSINESS: ${foundBusinessName}`);\n  return [{ \n    json: { \n      skip: true, \n      reason: 'Business configuration is inactive',\n      businessName: foundBusinessName,\n      businessId: selectedBusinessId,\n      activeStatus: isBusinessActive\n    } \n  }];\n}\n\nconsole.log(`✅ PROCESSING ACTIVE BUSINESS: ${foundBusinessName}`);\n\n// Helper functions for business config extraction\nfunction getRichText(property) {\n  if (!property) return '';\n  if (typeof property === 'string') return property;\n  if (property.rich_text && Array.isArray(property.rich_text) && property.rich_text.length > 0) {\n    return property.rich_text[0].plain_text || '';\n  }\n  if (property.title && Array.isArray(property.title) && property.title.length > 0) {\n    return property.title[0].plain_text || '';\n  }\n  return '';\n}\n\nfunction getTitle(property) {\n  return property?.title?.[0]?.plain_text || '';\n}\n\nfunction getSelect(property) {\n  return property?.select?.name || '';\n}\n\nfunction safeParseInt(value, fallback) {\n  if (!value && value !== 0) {\n    console.log(`Using fallback ${fallback} for null/undefined value`);\n    return fallback;\n  }\n  \n  if (typeof value === 'number' && !isNaN(value)) {\n    console.log(`Value is already a number: ${value}`);\n    return Math.round(value);\n  }\n  \n  if (typeof value === 'string') {\n    const parsed = parseInt(value.trim());\n    if (!isNaN(parsed) && parsed > 0) {\n      console.log(`Successfully parsed string \"${value}\" to number: ${parsed}`);\n      return parsed;\n    } else {\n      console.log(`Failed to parse string \"${value}\", using fallback: ${fallback}`);\n      return fallback;\n    }\n  }\n  \n  console.log(`Unexpected type ${typeof value}, using fallback: ${fallback}`);\n  return fallback;\n}\n\n// 🎯 PRIORITY 1: EXTRACT USER FORM DATA (HIGHEST PRIORITY) - CORRECT EXTRACTION\nconsole.log('=== USER FORM DATA EXTRACTION (HIGHEST PRIORITY - FIXED) ===');\n\n// Extract form fields using the ACTUAL JSON structure from form submission\nconst userBusinessName = formSubmissionData['Business Name'] || '';\nconst userSocialContentType = formSubmissionData['Social Content Type'] || 'Educational';\nconst userSpecificTopic = formSubmissionData['Specific Topic'] || '';\nconst userWordCountTarget = formSubmissionData['Word Count Target'] || '50';\nconst userProductFocusUrl = formSubmissionData['Product Focus URL'] || '';\nconst userCtaUrl = formSubmissionData['CTA URL'] || '';\nconst userSeoKeywords = formSubmissionData['SEO Keywords'] || '';\nconst userContentBrief = formSubmissionData['Content Brief'] || '';\n\nconsole.log('✅ USER FORM DATA EXTRACTED (CORRECTED):');\nconsole.log('  Business Name:', userBusinessName);\nconsole.log('  Social Content Type:', userSocialContentType);\nconsole.log('  Specific Topic:', userSpecificTopic);\nconsole.log('  Word Count Target:', userWordCountTarget);\nconsole.log('  Product Focus URL:', userProductFocusUrl || 'None');\nconsole.log('  CTA URL:', userCtaUrl || 'None');\nconsole.log('  SEO Keywords:', userSeoKeywords || 'None');\nconsole.log('  Content Brief Length:', userContentBrief.length);\n\n// VALIDATION: Ensure critical form data is present\nif (!userSpecificTopic || userSpecificTopic.length < 3) {\n  console.log('❌ CRITICAL ERROR: Specific Topic missing or too short');\n  console.log('Specific Topic value:', userSpecificTopic);\n  return [{ \n    json: { \n      error: 'Missing specific topic',\n      skip: true,\n      reason: 'User must provide a specific topic',\n      receivedTopic: userSpecificTopic\n    } \n  }];\n}\n\nif (!userContentBrief || userContentBrief.length < 20) {\n  console.log('❌ CRITICAL ERROR: Content Brief missing or too short');\n  console.log('Content Brief value:', userContentBrief);\n  return [{ \n    json: { \n      error: 'Missing content brief',\n      skip: true,\n      reason: 'User must provide detailed content brief',\n      receivedBrief: userContentBrief\n    } \n  }];\n}\n\n// Process word count target\nconst shortformWordCount = safeParseInt(userWordCountTarget, 50);\nconst longformWordCount = 800; // Standard longform target\n\n// Validate word count ranges\nconst validatedShortform = Math.max(10, Math.min(shortformWordCount, 100));\nconst validatedLongform = Math.max(100, Math.min(longformWordCount, 3000));\n\nif (validatedShortform !== shortformWordCount) {\n  console.log(`⚠️ Shortform word count ${shortformWordCount} adjusted to ${validatedShortform} (valid range: 10-100)`);\n}\n\nconst finalShortformWordCount = validatedShortform;\nconst finalLongformWordCount = validatedLongform;\n\n// Calculate character estimates\nconst shortformCharEstimate = finalShortformWordCount * 6;\nconst longformCharEstimate = finalLongformWordCount * 6;\n\nconsole.log('=== WORD COUNT PROCESSING ===');\nconsole.log('User requested word count:', userWordCountTarget);\nconsole.log('Final shortform word count:', finalShortformWordCount);\nconsole.log('Final longform word count:', finalLongformWordCount);\n\n// URL system detection\nconst hasUserProductFocusUrl = !!(userProductFocusUrl && userProductFocusUrl.trim() !== '');\nconst hasUserCtaUrl = !!(userCtaUrl && userCtaUrl.trim() !== '');\n\nconsole.log('--- USER DUAL URL SYSTEM DEBUG ---');\nconsole.log('Product Focus URL:', userProductFocusUrl);\nconsole.log('Has Product Focus URL:', hasUserProductFocusUrl);\nconsole.log('CTA URL:', userCtaUrl);\nconsole.log('Has CTA URL:', hasUserCtaUrl);\nconsole.log('URL System Status:', hasUserProductFocusUrl || hasUserCtaUrl ? 'Active' : 'Inactive');\n\n// PRIORITY 2: EXTRACT BUSINESS DATA (SEPARATE FROM FORM DATA)\nconsole.log('=== EXTRACTING BUSINESS CONFIGURATION DATA ===');\n\nconst businessData = businessConfig.json.properties;\nconst businessName = getTitle(businessData['Title']);\nconst businessCategory = getSelect(businessData['Business Category']);\nconst targetAudience = getRichText(businessData['Target Audience']);\nconst brandVoice = getRichText(businessData['Brand Voice Guidelines']);\nconst baseSystemMessage = getRichText(businessData['GENERATE TEXT - System Message']);\nconst baseImagePrompt = getRichText(businessData['GENERATE PROMPT - User Message']);\nconst baseImageSystem = getRichText(businessData['GENERATE PROMPT - System Message']);\nconst googleDriveFolder = getRichText(businessData['Google Drive Parent Folder']);\nconst ctaTemplate = getRichText(businessData['Call to Action Template']);\n\n// Enhanced business fields\nconst seoStrategy = getRichText(businessData['SEO Strategy Template']) || '';\nconst businessNotes = getRichText(businessData['Notes']) || '';\nconst customGlobalRules = getRichText(businessData['Global Content Rules']) || '';\nconst imageStylePreferences = getRichText(businessData['Image Style Preferences']) || '';\nconst brandColors = getRichText(businessData['Brand Colors']) || '';\n\nconsole.log('✅ BUSINESS CONFIGURATION EXTRACTED:');\nconsole.log('  Business Name:', businessName);\nconsole.log('  Business Category:', businessCategory);\nconsole.log('  Target Audience:', targetAudience ? 'Available' : 'Not configured');\nconsole.log('  Brand Voice:', brandVoice ? 'Available' : 'Not configured');\nconsole.log('  Business Notes:', businessNotes ? 'Available' : 'Not configured');\nconsole.log('  Custom Rules:', customGlobalRules ? 'Available' : 'Not configured');\n\n// Website integration\nconst websiteUrlsRaw = getRichText(businessData['Website URLs']) || '';\nconst websiteUrls = websiteUrlsRaw \n  ? websiteUrlsRaw.split(',').map(url => url.trim()).filter(url => url.length > 0)\n  : [];\nconst hasWebsites = websiteUrls.length > 0;\n\n// Success story detection\nconst isSuccessStory = userSocialContentType === 'Success Story' || \n                      userSpecificTopic.toLowerCase().includes('success') ||\n                      userSpecificTopic.toLowerCase().includes('testimonial') ||\n                      userContentBrief.toLowerCase().includes('customer story') ||\n                      userContentBrief.toLowerCase().includes('success story');\n\nconst hasFacebookReviews = websiteUrls.some(url => url.includes('facebook.com') && url.includes('review'));\nconst hasGoogleReviews = websiteUrls.some(url => url.includes('google.com') || url.includes('g.page'));\nconst hasReviewPlatforms = hasFacebookReviews || hasGoogleReviews;\n\nconsole.log('--- SUCCESS STORY DETECTION DEBUG ---');\nconsole.log('Is Success Story:', isSuccessStory);\nconsole.log('Content Type:', userSocialContentType);\nconsole.log('Topic contains success:', userSpecificTopic.toLowerCase().includes('success'));\n\n// 🎯 PRIORITY 3: CREATE USER-FOCUSED CONTENT BRIEF WITH BUSINESS CONTEXT\nconsole.log('=== BUILDING USER-FOCUSED CONTENT BRIEF ===');\n\n// Start with user's specific requirements as the foundation\nlet enhancedContentBrief = `🚨 CRITICAL: User has submitted specific content requirements via form.\n\nTOPIC: ${userSpecificTopic}\n\nCONTENT BRIEF: ${userContentBrief}\n\n🎯 USER'S SPECIFIC REQUIREMENTS MUST TAKE PRIORITY OVER ALL BUSINESS RULES.\n\nIGNORE any conflicting business configuration rules. Generate content specifically about the user's requested topic: \"${userSpecificTopic}\"\n\nUSER REQUIREMENTS:\n- Topic: ${userSpecificTopic}\n- Content Type: ${userSocialContentType}\n- Content Brief: ${userContentBrief}\n- Word Count: ${finalShortformWordCount} words (shortform), ${finalLongformWordCount} words (longform)`;\n\n// Add user's URLs if provided\nif (hasUserProductFocusUrl) {\n  enhancedContentBrief += `\\n\\nRESEARCH SOURCE: Research and reference this URL for content alignment and accuracy: ${userProductFocusUrl}. Extract key information, features, or context from this page to inform the content.`;\n}\n\nif (hasUserCtaUrl) {\n  enhancedContentBrief += `\\n\\nCALL-TO-ACTION DESTINATION: Direct readers to this URL in your call-to-action: ${userCtaUrl}. This is where readers should go for next steps.`;\n}\n\nif (userSeoKeywords && userSeoKeywords.trim() !== '') {\n  enhancedContentBrief += `\\n\\nSEO FOCUS: Naturally incorporate these keywords: ${userSeoKeywords}`;\n}\n\n// Add business context as SECONDARY information\nenhancedContentBrief += `\n\n--- BUSINESS CONTEXT (Secondary to user requirements) ---\nBusiness: ${businessName}\nCategory: ${businessCategory}\nTarget Audience: ${targetAudience}\nBrand Voice: ${brandVoice}`;\n\nif (businessNotes) {\n  enhancedContentBrief += `\\nBusiness Context: ${businessNotes}`;\n}\n\nif (isSuccessStory && hasReviewPlatforms) {\n  enhancedContentBrief += `\\n\\nSUCCESS STORY: Research customer reviews from provided review platform URLs for authentic testimonials and success stories.`;\n}\n\n// BUILD SYSTEM MESSAGES WITH USER PRIORITY\nconsole.log('=== BUILDING USER-FOCUSED SYSTEM MESSAGES ===');\n\n// Create system message that prioritizes user requirements\nconst userPriorityInstruction = `🚨 CRITICAL USER PRIORITY INSTRUCTION 🚨\n\nUSER HAS SUBMITTED SPECIFIC CONTENT REQUIREMENTS - THESE TAKE HIGHEST PRIORITY\n\nUSER'S TOPIC: ${userSpecificTopic}\nUSER'S CONTENT BRIEF: ${userContentBrief}\nUSER'S CONTENT TYPE: ${userSocialContentType}\n\nINSTRUCTION HIERARCHY:\n1. USER FORM SUBMISSION (HIGHEST PRIORITY) - Follow user's specific topic and content brief exactly\n2. Business voice and audience guidelines (Secondary) - Use for tone and style only\n3. Default business rules (Lowest) - Only if not conflicting with user requirements\n\n⚠️ IMPORTANT: If business rules conflict with user's specific topic request, PRIORITIZE THE USER'S REQUIREMENTS.`;\n\n// Shortform system message\nconst shortformSystemMessage = `${userPriorityInstruction}\n\nCRITICAL SHORTFORM CONTENT REQUIREMENTS:\n- TARGET LENGTH: ${finalShortformWordCount} words exactly\n- CONTENT TYPE: ${userSocialContentType}\n- TOPIC FOCUS: Write specifically about \"${userSpecificTopic}\" as requested by user\n- Use British English spelling (colour, realise, centre, organised, etc.)\n- Minimal emoji usage (only when very relevant)\n\nCONTENT REQUIREMENTS:\n- Write SPECIFICALLY about: ${userSpecificTopic}\n- Follow the content brief: ${userContentBrief}\n- Use ${userSocialContentType} format\n- Target ${finalShortformWordCount} words exactly\n- Business: ${businessName} (${businessCategory})\n- Audience: ${targetAudience}\n- Voice: ${brandVoice}\n- No em dashes, and never use them, replacing them with commas or semi colons (where necessary)\n- Never ever fabricate a story or customer testimonial, only use reliable online sources for stories about the business.  Only use online sources for testimonials (Google Reviews, Facebook Reviews, etc.)\n\n${userSeoKeywords ? `\\nSEO KEYWORDS: ${userSeoKeywords}` : ''}\n${hasUserProductFocusUrl ? `\\nRESEARCH URL: ${userProductFocusUrl}` : ''}\n${hasUserCtaUrl ? `\\nCTA URL: ${userCtaUrl}` : ''}\n\nBUSINESS CONTEXT (Secondary):\n${businessNotes}\n\n${baseSystemMessage ? `\\nADDITIONAL BUSINESS GUIDELINES: ${baseSystemMessage}` : ''}\n\n🎯 REMEMBER: The user has specifically requested content about \"${userSpecificTopic}\" - deliver exactly what they asked for.\n\nWORD COUNT ENFORCEMENT:\n- Target exactly ${finalShortformWordCount} words\n- Count every word carefully\n- Do NOT include word count in your response\n- Response should be pure content only`;\n\n// Longform system message (similar structure but for longform)\nconst longformSystemMessage = `${userPriorityInstruction}\n\nCRITICAL LONGFORM CONTENT REQUIREMENTS:\n- TARGET LENGTH: ${finalLongformWordCount} words exactly\n- CONTENT TYPE: ${userSocialContentType}\n- TOPIC FOCUS: Write specifically about \"${userSpecificTopic}\" as requested by user\n- Use British English spelling (colour, realise, centre, organised, etc.)\n- Minimal emoji usage (only when very relevant)\n\nCONTENT REQUIREMENTS:\n- Write SPECIFICALLY about: ${userSpecificTopic}\n- Follow the content brief: ${userContentBrief}\n- Use ${userSocialContentType} format\n- Target ${finalLongformWordCount} words exactly\n- Business: ${businessName} (${businessCategory})\n- Audience: ${targetAudience}\n- Voice: ${brandVoice}\n\n${userSeoKeywords ? `\\nSEO KEYWORDS: ${userSeoKeywords}` : ''}\n${hasUserProductFocusUrl ? `\\nRESEARCH URL: ${userProductFocusUrl}` : ''}\n${hasUserCtaUrl ? `\\nCTA URL: ${userCtaUrl}` : ''}\n\nBUSINESS CONTEXT (Secondary):\n${businessNotes}\n\n${baseSystemMessage ? `\\nADDITIONAL BUSINESS GUIDELINES: ${baseSystemMessage}` : ''}\n\n🎯 REMEMBER: The user has specifically requested content about \"${userSpecificTopic}\" - deliver exactly what they asked for.\n\nWORD COUNT ENFORCEMENT:\n- Target exactly ${finalLongformWordCount} words\n- Count every word carefully\n- Do NOT include word count in your response\n- Response should be pure content only`;\n\n// Image prompt with user topic\nconst contentElement = userSpecificTopic || `${userSocialContentType.toLowerCase()} content` || 'business content';\nconst finalImageStyle = (baseImagePrompt || 'Professional business image')\n  .replace('{specific_element}', contentElement)\n  .replace('{specific element}', contentElement);\n\n// Create clean business name for file naming\nconst cleanBusinessName = businessName.replace(/[^a-zA-Z0-9\\s]/g, '').replace(/\\s+/g, '_');\n\nconsole.log('=== FINAL USER-FOCUSED CONTENT PACKAGE ===');\nconsole.log('✅ User Topic:', userSpecificTopic);\nconsole.log('✅ Content Brief Length:', userContentBrief.length);\nconsole.log('✅ Content Type:', userSocialContentType);\nconsole.log('✅ Word Count Target:', finalShortformWordCount);\nconsole.log('✅ Business Context:', businessName);\nconsole.log('✅ SEO Keywords:', userSeoKeywords ? 'Provided' : 'None');\nconsole.log('✅ Product URL:', userProductFocusUrl ? 'Provided' : 'None');\nconsole.log('✅ CTA URL:', userCtaUrl ? 'Provided' : 'None');\n\n// VALIDATION CHECK\nif (!userSpecificTopic || !userContentBrief) {\n  console.log('❌ CRITICAL ERROR: Missing user requirements');\n  console.log('Topic:', userSpecificTopic);\n  console.log('Brief:', userContentBrief);\n}\n\nconsole.log('=== PROCESSING COMPLETE (USER PRIORITY SYSTEM) ===');\n\n// RETURN DATA STRUCTURE WITH USER PRIORITY\nreturn [{\n  json: {\n    // USER FORM DATA (HIGHEST PRIORITY)\n    specificTopic: userSpecificTopic,\n    contentBrief: enhancedContentBrief,\n    socialContentType: userSocialContentType,\n    \n    // Word count system\n    shortformWordCount: finalShortformWordCount,\n    longformWordCount: finalLongformWordCount,\n    shortformCharEstimate: shortformCharEstimate,\n    longformCharEstimate: longformCharEstimate,\n    \n    // USER URLs\n    productFocusUrl: userProductFocusUrl,\n    hasProductFocusUrl: hasUserProductFocusUrl,\n    ctaUrl: userCtaUrl,\n    hasCtaUrl: hasUserCtaUrl,\n    \n    // USER SEO\n    seoKeywords: userSeoKeywords,\n    hasSeoKeywords: !!(userSeoKeywords && userSeoKeywords.trim() !== ''),\n    \n    // BUSINESS CONTEXT (SECONDARY)\n    businessName: businessName,\n    businessCategory: businessCategory,\n    businessId: selectedBusinessId,\n    targetAudience: targetAudience,\n    brandVoice: brandVoice,\n    businessNotes: businessNotes,\n    customGlobalRules: customGlobalRules,\n    seoStrategy: seoStrategy,\n    \n    // SYSTEM MESSAGES WITH USER PRIORITY\n    systemMessage: longformSystemMessage,\n    shortformSystemMessage: shortformSystemMessage,\n    longformSystemMessage: longformSystemMessage,\n    \n    // Image generation\n    promptUserMessage: finalImageStyle,\n    promptSystemMessage: baseImageSystem || 'Generate a professional business image',\n    \n    // File management\n    driveFolder: googleDriveFolder || 'Generated_Images',\n    fileName: `${cleanBusinessName}-${userSocialContentType}-${Date.now()}.png`,\n    callToAction: ctaTemplate || 'Contact us to learn more',\n    \n    // FORM DATA TRACKING\n    formData: {\n      businessName: userBusinessName,\n      socialContentType: userSocialContentType,\n      specificTopic: userSpecificTopic,\n      wordCountTarget: finalShortformWordCount,\n      productFocusUrl: userProductFocusUrl,\n      ctaUrl: userCtaUrl,\n      seoKeywords: userSeoKeywords,\n      contentBrief: userContentBrief\n    },\n    \n    // USER REQUIREMENTS TRACKING\n    userRequirements: {\n      specificTopic: userSpecificTopic,\n      contentBrief: userContentBrief,\n      socialContentType: userSocialContentType,\n      seoKeywords: userSeoKeywords,\n      productFocusUrl: userProductFocusUrl,\n      ctaUrl: userCtaUrl,\n      userPriorityActive: true\n    },\n    \n    // CONTENT GENERATION STATUS\n    contentId: `form_${Date.now()}`,\n    contentName: `${userSocialContentType}: ${userSpecificTopic}`,\n    \n    // Enhanced fields integration (preserved from original)\n    hasSpecificTopic: !!(userSpecificTopic && userSpecificTopic.trim() !== ''),\n    dualUrlSystem: true,\n    websiteUrls: websiteUrls,\n    hasWebsites: hasWebsites,\n    websiteCount: websiteUrls.length,\n    isSuccessStory: isSuccessStory,\n    hasReviewPlatforms: hasReviewPlatforms,\n    imageStylePreferences: imageStylePreferences,\n    brandColors: brandColors,\n    hasImageStylePreferences: !!imageStylePreferences,\n    hasBrandColors: !!brandColors,\n    \n    // Content strategy\n    contentStrategy: {\n      shortform: {\n        wordCount: finalShortformWordCount,\n        purpose: 'Universal social media content',\n        platforms: ['Facebook', 'Instagram', 'Twitter', 'LinkedIn Posts', 'TikTok']\n      },\n      longform: {\n        wordCount: finalLongformWordCount,\n        purpose: 'Professional and educational content',\n        platforms: ['LinkedIn Articles', 'Blog Posts', 'Newsletters', 'Website Content']\n      }\n    },\n    \n    // STATUS\n    userFormPriority: true,\n    formDataComplete: !!(userSpecificTopic && userContentBrief),\n    businessConfigLoaded: !!(businessName && businessCategory),\n    businessActive: isBusinessActive,\n    \n    // Enhanced fields integration tracking\n    enhancedFieldsIntegration: {\n      seoStrategy: !!seoStrategy,\n      businessNotes: !!businessNotes,\n      customGlobalRules: !!customGlobalRules,\n      imageStylePreferences: !!imageStylePreferences,\n      brandColors: !!brandColors,\n      websiteVisualAnalysis: hasWebsites,\n      successStoryIntegration: isSuccessStory && hasReviewPlatforms,\n      formSeoKeywords: !!(userSeoKeywords && userSeoKeywords.trim() !== ''),\n      formProductFocusUrl: hasUserProductFocusUrl,\n      formCtaUrl: hasUserCtaUrl,\n      userPrioritySystemActive: true,\n      userRequirementsPresent: !!(userSpecificTopic && userContentBrief)\n    },\n    \n    // DEBUG INFO\n    debug: {\n      userTopicLength: userSpecificTopic.length,\n      contentBriefLength: userContentBrief.length,\n      wordCountValid: finalShortformWordCount >= 10 && finalShortformWordCount <= 120,\n      businessConfigFound: true,\n      formPriorityActive: true,\n      extractionMethod: 'direct_json_keys'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        -240
      ],
      "id": "15f72e13-d2d3-4dc4-905b-bb329e38bc63",
      "name": "Prepare Dynamic Data"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Prepare Dynamic Data').item.json.driveFolder }}",
        "filter": {
          "driveId": {
            "__rl": true,
            "value": "My Drive",
            "mode": "list",
            "cachedResultName": "My Drive",
            "cachedResultUrl": "https://drive.google.com/drive/my-drive"
          },
          "folderId": {
            "__rl": true,
            "value": "1f9X-Jqdzk1HV6tVwHHSfWgodNJ_ki8Vu",
            "mode": "list",
            "cachedResultName": "Social Media Business",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1f9X-Jqdzk1HV6tVwHHSfWgodNJ_ki8Vu"
          },
          "whatToSearch": "folders",
          "includeTrashed": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1104,
        464
      ],
      "id": "678149f7-1367-46f7-8a75-859368de3841",
      "name": "Find Business Folder",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "lml9nJV2CfuBJkTv",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Prepare Upload Data - handles dynamic folders and unique naming\nconst newFolderData = $('Google Drive Create Folder').item.json;\nconst businessFolderData = $('Find Business Folder').item.json;\nconst dynamicData = $('Prepare Dynamic Data').item.json;\nconst folderCreationData = $('Create Content Folder').item.json;\n\n// Generate unique filename based on content title\nconst baseFileName = folderCreationData.cleanFolderName || 'content';\nconst timestamp = folderCreationData.timestamp;\nconst uniqueFileName = `${baseFileName}_original_${timestamp}.png`;\n\n// Generate unique document name\nconst docFileName = `${baseFileName}_content_${timestamp}`;\n\nconsole.log('=== ENHANCED FILE UPLOAD PREPARATION ===');\nconsole.log('New content folder ID:', newFolderData.id);\nconsole.log('New content folder name:', newFolderData.name);\nconsole.log('Original image filename:', uniqueFileName);\nconsole.log('Document filename:', docFileName);\nconsole.log('Business folder path:', businessFolderData.name);\n\n// Validate we have the binary data\nconst binaryData = $('OPENAI GENERATES IMAGE').item.binary;\nif (!binaryData || !binaryData.data) {\n  throw new Error('No image binary data found from OpenAI');\n}\n\nreturn {\n  json: {\n    // Folder information\n    folderId: newFolderData.id,\n    folderName: newFolderData.name,\n    parentFolderId: businessFolderData.id,\n    folderPath: `${businessFolderData.name}/${newFolderData.name}`,\n    \n    // File naming\n    fileName: uniqueFileName,\n    docFileName: docFileName,\n    baseFileName: baseFileName,\n    timestamp: timestamp,\n    \n    // Content information\n    contentTitle: folderCreationData.originalTitle,\n    contentId: dynamicData.contentId,\n    \n    // Links for easy access\n    folderUrl: `https://drive.google.com/drive/folders/${newFolderData.id}`,\n    \n    // Debug info\n    debug: {\n      hasImageData: !!binaryData?.data,\n      imageDataType: binaryData?.mimeType || 'unknown',\n      folderCreated: true,\n      uniqueNaming: true\n    }\n  },\n  binary: binaryData // Pass through the image binary data\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1712,
        464
      ],
      "id": "8e4af719-fb92-40fe-91c0-8d9401207b7a",
      "name": "Prepare Upload Data"
    },
    {
      "parameters": {
        "jsCode": "// Minimal - just set optimizedPrompt for next node\nreturn [{\n  json: {\n    optimizedPrompt: $input.item.json.output\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3696,
        32
      ],
      "id": "21d6ea07-92b8-480e-9bf7-e29e42e3be1b",
      "name": "Optimize Image Prompt",
      "retryOnFail": false
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Debug Content Generation Node - WITH COMPREHENSIVE FORM DATA INTEGRATION\n// ENHANCED VERSION: Includes debugging for all form fields, SEO Strategy, Notes, Global Content Rules, and Product URL\nconst dynamicData = $('Prepare Dynamic Data').item.json;\n\nconsole.log('=== COMPREHENSIVE CONTENT GENERATION DEBUG WITH FORM DATA ===');\nconsole.log('Business Name:', dynamicData.businessName);\nconsole.log('Content Type:', dynamicData.socialContentType);\nconsole.log('Content Brief:', dynamicData.contentBrief);\nconsole.log('Content Brief Length:', dynamicData.contentBrief ? dynamicData.contentBrief.length : 0);\nconsole.log('System Message Length:', dynamicData.systemMessage ? dynamicData.systemMessage.length : 0);\nconsole.log('Has System Message:', !!dynamicData.systemMessage);\n\n// NEW: COMPREHENSIVE FORM DATA DEBUG\nconsole.log('');\nconsole.log('=== FORM SUBMISSION DATA DEBUG ===');\nconst formData = dynamicData.formData || {};\n\nconsole.log('Form Data Available:', Object.keys(formData).length > 0);\nconsole.log('Business Name (Form):', formData.businessName || 'Not provided');\nconsole.log('Social Content Type (Form):', formData.socialContentType || 'Not provided');\nconsole.log('Specific Topic (Form):', formData.specificTopic || 'Not provided');\nconsole.log('Word Count Target (Form):', formData.wordCountTarget || 'Not provided');\nconsole.log('Product Focus URL (Form):', formData.productFocusUrl || 'Not provided');\nconsole.log('SEO Keywords (Form):', formData.seoKeywords || 'Not provided');\nconsole.log('Content Brief (Form):', formData.contentBrief ? `${formData.contentBrief.length} characters` : 'Not provided');\n\n// Form data validation\nconst formDataIssues = [];\nif (!formData.businessName) formDataIssues.push('Missing business name');\nif (!formData.socialContentType) formDataIssues.push('Missing content type');\nif (!formData.specificTopic) formDataIssues.push('Missing specific topic');\nif (!formData.contentBrief || formData.contentBrief.length < 20) formDataIssues.push('Content brief too short');\n\nconsole.log('Form Data Issues:', formDataIssues.length > 0 ? formDataIssues : 'None detected');\n\n// NEW: SEO KEYWORDS INTEGRATION DEBUG\nconsole.log('');\nconsole.log('=== SEO KEYWORDS INTEGRATION DEBUG ===');\nconst hasSeoKeywords = dynamicData.hasSeoKeywords || false;\nconst seoKeywords = dynamicData.seoKeywords || '';\n\nconsole.log('SEO Keywords Available:', hasSeoKeywords);\nconsole.log('SEO Keywords:', seoKeywords || 'None provided');\n\nif (hasSeoKeywords && seoKeywords) {\n  const keywords = seoKeywords.split(',').map(k => k.trim()).filter(k => k.length > 0);\n  console.log('Parsed Keywords:', keywords);\n  console.log('Keyword Count:', keywords.length);\n  console.log('Primary Keywords (Top 3):', keywords.slice(0, 3));\n  \n  // Keyword validation\n  const keywordIssues = [];\n  if (keywords.length === 0) keywordIssues.push('No valid keywords after parsing');\n  if (keywords.some(k => k.length < 3)) keywordIssues.push('Some keywords too short');\n  if (keywords.some(k => k.length > 50)) keywordIssues.push('Some keywords too long');\n  \n  console.log('Keyword Issues:', keywordIssues.length > 0 ? keywordIssues : 'None detected');\n  console.log('SEO Integration Status:', '✅ ACTIVE - Keywords will be integrated into content');\n} else {\n  console.log('SEO Integration Status:', '⚠️ INACTIVE - No SEO keywords provided');\n}\n\n// NEW: PRODUCT URL INTEGRATION DEBUG\nconsole.log('');\nconsole.log('=== PRODUCT URL INTEGRATION DEBUG ===');\nconst hasProductUrl = dynamicData.hasProductUrl || false;\nconst productFocusUrl = dynamicData.productFocusUrl || '';\nconst productUrlPurpose = dynamicData.productUrlPurpose || '';\n\nconsole.log('Product URL Available:', hasProductUrl);\nconsole.log('Product URL:', productFocusUrl || 'None provided');\nconsole.log('Product URL Purpose:', productUrlPurpose || 'Not determined');\n\nif (hasProductUrl && productFocusUrl) {\n  // URL validation\n  const urlIssues = [];\n  try {\n    const url = new URL(productFocusUrl.startsWith('http') ? productFocusUrl : 'https://' + productFocusUrl);\n    console.log('URL Domain:', url.hostname);\n    console.log('URL Protocol:', url.protocol);\n    console.log('URL Path:', url.pathname);\n    console.log('URL Validation:', '✅ Valid URL format');\n  } catch (error) {\n    urlIssues.push(`Invalid URL format: ${error.message}`);\n    console.log('URL Validation:', '❌ Invalid URL format');\n  }\n  \n  console.log('URL Issues:', urlIssues.length > 0 ? urlIssues : 'None detected');\n  console.log('Product URL Integration Status:', '✅ ACTIVE - URL will be researched and referenced');\n  \n  // URL purpose analysis\n  console.log('URL Purpose Details:');\n  switch (productUrlPurpose) {\n    case 'product_feature_analysis':\n      console.log('  - Will extract product features and benefits');\n      break;\n    case 'educational_content_reference':\n      console.log('  - Will use as educational reference source');\n      break;\n    case 'solution_alignment':\n      console.log('  - Will align content with URL solutions');\n      break;\n    case 'process_documentation':\n      console.log('  - Will reference URL processes and methods');\n      break;\n    case 'success_case_study':\n      console.log('  - Will incorporate URL success metrics');\n      break;\n    default:\n      console.log('  - General content alignment and reference');\n  }\n} else {\n  console.log('Product URL Integration Status:', '⚠️ INACTIVE - No product URL provided');\n}\n\n// ENHANCED BUSINESS DATABASE FIELDS DEBUG\nconsole.log('');\nconsole.log('=== ENHANCED BUSINESS DATABASE FIELDS DEBUG ===');\nconsole.log('SEO Strategy found:', !!dynamicData.seoStrategy, dynamicData.seoStrategy ? `(${dynamicData.seoStrategy.length} chars)` : '');\nconsole.log('Business Notes found:', !!dynamicData.businessNotes, dynamicData.businessNotes ? `(${dynamicData.businessNotes.length} chars)` : '');\nconsole.log('Custom Global Rules found:', !!dynamicData.customGlobalRules, dynamicData.customGlobalRules ? `(${dynamicData.customGlobalRules.length} chars)` : '');\n\n// NEW: VISUAL FIELDS DEBUG\nconsole.log('--- NEW VISUAL FIELDS DEBUG ---');\nconsole.log('Image Style Preferences found:', !!dynamicData.imageStylePreferences, dynamicData.imageStylePreferences ? `(${dynamicData.imageStylePreferences.length} chars)` : '');\nconsole.log('Brand Colors found:', !!dynamicData.brandColors, dynamicData.brandColors ? `(${dynamicData.brandColors.length} chars)` : '');\n\n// INTEGRATION STATUS SUMMARY\nconsole.log('');\nconsole.log('=== COMPREHENSIVE INTEGRATION STATUS SUMMARY ===');\nconst integrationStatus = dynamicData.enhancedFieldsIntegration || {};\n\nconsole.log('Form Data Integration:');\nconsole.log('  - SEO Keywords:', hasSeoKeywords ? '✅ ACTIVE' : '❌ Not provided');\nconsole.log('  - Product URL:', hasProductUrl ? '✅ ACTIVE' : '❌ Not provided');\nconsole.log('  - Form Data Quality:', formDataIssues.length === 0 ? '✅ GOOD' : `⚠️ Issues: ${formDataIssues.length}`);\n\nconsole.log('Business Database Integration:');\nconsole.log('  - SEO Strategy:', integrationStatus.seoStrategy ? '✅ ACTIVE' : '❌ Not configured');\nconsole.log('  - Business Notes:', integrationStatus.businessNotes ? '✅ ACTIVE' : '❌ Not provided');\nconsole.log('  - Custom Global Rules:', integrationStatus.customGlobalRules ? '✅ ACTIVE' : '❌ Not configured');\n\nconsole.log('Visual Enhancement Integration:');\nconsole.log('  - Image Style Preferences:', integrationStatus.imageStylePreferences ? '✅ ACTIVE' : '❌ Not configured');\nconsole.log('  - Brand Colors:', integrationStatus.brandColors ? '✅ ACTIVE' : '❌ Not configured');\n\nconsole.log('Website & Success Story Integration:');\nconsole.log('  - Website Analysis:', integrationStatus.websiteVisualAnalysis ? '✅ ACTIVE' : '❌ No websites');\nconsole.log('  - Success Story Research:', integrationStatus.successStoryIntegration ? '✅ ACTIVE' : '❌ Not applicable');\n\n// OVERALL INTEGRATION ASSESSMENT\nconst totalIntegrations = [\n  hasSeoKeywords,\n  hasProductUrl,\n  integrationStatus.seoStrategy,\n  integrationStatus.businessNotes,\n  integrationStatus.customGlobalRules,\n  integrationStatus.imageStylePreferences,\n  integrationStatus.brandColors,\n  integrationStatus.websiteVisualAnalysis,\n  integrationStatus.successStoryIntegration\n].filter(Boolean).length;\n\nconst maxIntegrations = 9;\nconst integrationPercentage = Math.round((totalIntegrations / maxIntegrations) * 100);\n\nconsole.log('');\nconsole.log('=== INTEGRATION COMPLETENESS ANALYSIS ===');\nconsole.log(`Active Integrations: ${totalIntegrations}/${maxIntegrations} (${integrationPercentage}%)`);\nconsole.log('Integration Level:', \n  integrationPercentage >= 80 ? '🔥 EXCELLENT - Comprehensive integration' :\n  integrationPercentage >= 60 ? '✅ GOOD - Strong integration' :\n  integrationPercentage >= 40 ? '⚠️ MODERATE - Partial integration' :\n  '❌ LIMITED - Basic integration only'\n);\n\n// CONTENT GENERATION READINESS ASSESSMENT\nconsole.log('');\nconsole.log('=== CONTENT GENERATION READINESS ASSESSMENT ===');\n\n// Check for critical issues\nconst criticalIssues = [];\nif (!dynamicData.contentBrief || dynamicData.contentBrief.trim() === '') {\n  criticalIssues.push('❌ Content Brief is empty');\n}\nif (!dynamicData.systemMessage || dynamicData.systemMessage.trim() === '') {\n  criticalIssues.push('❌ System Message is empty');\n}\nif (!dynamicData.businessName) {\n  criticalIssues.push('❌ Business Name is missing');\n}\n\n// Check for enhancement opportunities\nconst enhancementOpportunities = [];\nif (!hasSeoKeywords) {\n  enhancementOpportunities.push('⚠️ SEO Keywords not provided - missing keyword optimization');\n}\nif (!hasProductUrl) {\n  enhancementOpportunities.push('⚠️ Product URL not provided - missing content alignment opportunity');\n}\nif (!integrationStatus.seoStrategy) {\n  enhancementOpportunities.push('⚠️ Business SEO Strategy not configured - missing business-specific SEO');\n}\nif (!integrationStatus.businessNotes) {\n  enhancementOpportunities.push('⚠️ Business Notes not provided - missing business context');\n}\nif (!integrationStatus.customGlobalRules) {\n  enhancementOpportunities.push('⚠️ Custom Global Rules not provided - using default workflow rules');\n}\n\nconsole.log('CRITICAL ISSUES:', criticalIssues.length > 0 ? criticalIssues : ['✅ No critical issues detected']);\nconsole.log('ENHANCEMENT OPPORTUNITIES:', enhancementOpportunities);\n\n// Calculate content quality score\nlet contentQualityScore = 100;\nif (criticalIssues.length > 0) contentQualityScore -= (criticalIssues.length * 30); // Critical issues heavily penalized\nif (enhancementOpportunities.length > 0) contentQualityScore -= (enhancementOpportunities.length * 8); // Enhancement issues lightly penalized\n\n// Bonus for form data integration\nif (hasSeoKeywords) contentQualityScore += 10;\nif (hasProductUrl) contentQualityScore += 10;\n\ncontentQualityScore = Math.max(0, Math.min(100, contentQualityScore));\n\nconsole.log('ESTIMATED CONTENT QUALITY SCORE:', contentQualityScore + '%');\n\n// RECOMMENDATIONS BASED ON INTEGRATION STATUS\nconsole.log('');\nconsole.log('=== CONTENT GENERATION RECOMMENDATIONS ===');\n\nif (hasSeoKeywords) {\n  console.log('✅ SEO-optimized content will be generated with keywords:', seoKeywords.split(',').slice(0, 3).join(', '));\n} else {\n  console.log('💡 Consider adding SEO Keywords in form for targeted keyword optimization');\n}\n\nif (hasProductUrl) {\n  console.log('✅ Content will be aligned with product/reference URL:', productFocusUrl);\n} else {\n  console.log('💡 Consider adding Product Focus URL for enhanced content alignment');\n}\n\nif (integrationStatus.businessNotes) {\n  console.log('✅ Business-specific context will enhance content personalization');\n} else {\n  console.log('💡 Consider adding Business Notes to provide unique context and selling points');\n}\n\nif (integrationStatus.customGlobalRules) {\n  console.log('✅ Business-specific content rules will be applied');\n} else {\n  console.log('💡 Consider adding Global Content Rules for business-specific guidelines');\n}\n\nif (integrationPercentage >= 70) {\n  console.log('🎯 CONTENT STRATEGY: Comprehensive approach with multiple data sources');\n} else if (integrationPercentage >= 40) {\n  console.log('🎯 CONTENT STRATEGY: Balanced approach with core data sources');\n} else {\n  console.log('🎯 CONTENT STRATEGY: Basic approach - consider enhancing with additional data');\n}\n\n// FINAL DEBUG SUMMARY\nconsole.log('');\nconsole.log('=== FINAL DEBUG SUMMARY ===');\nconsole.log('Ready for Generation:', criticalIssues.length === 0 ? '✅ YES' : '❌ NO - Resolve critical issues first');\nconsole.log('Form Data Utilization:', `${hasSeoKeywords || hasProductUrl ? '✅ ACTIVE' : '⚠️ INACTIVE'}`);\nconsole.log('Business Data Utilization:', `${integrationStatus.businessNotes ? '✅ ACTIVE' : '⚠️ LIMITED'}`);\nconsole.log('Content Enhancement Level:', \n  integrationPercentage >= 80 ? 'PREMIUM' :\n  integrationPercentage >= 60 ? 'ENHANCED' :\n  integrationPercentage >= 40 ? 'STANDARD' : 'BASIC'\n);\n\nreturn {\n  json: {\n    contentBrief: dynamicData.contentBrief,\n    systemMessage: dynamicData.systemMessage,\n    businessName: dynamicData.businessName,\n    \n    // Form data analysis\n    formDataAnalysis: {\n      available: Object.keys(formData).length > 0,\n      businessName: formData.businessName,\n      socialContentType: formData.socialContentType,\n      specificTopic: formData.specificTopic,\n      wordCountTarget: formData.wordCountTarget,\n      productFocusUrl: formData.productFocusUrl,\n      seoKeywords: formData.seoKeywords,\n      contentBrief: formData.contentBrief,\n      issues: formDataIssues,\n      quality: formDataIssues.length === 0 ? 'good' : 'issues_detected'\n    },\n    \n    // SEO integration analysis\n    seoIntegration: {\n      active: hasSeoKeywords,\n      keywords: seoKeywords,\n      keywordCount: hasSeoKeywords ? seoKeywords.split(',').length : 0,\n      primaryKeywords: hasSeoKeywords ? seoKeywords.split(',').slice(0, 3) : [],\n      status: hasSeoKeywords ? 'active' : 'inactive',\n      impact: hasSeoKeywords ? 'Content will be SEO-optimized' : 'Using general SEO practices'\n    },\n    \n    // Product URL integration analysis\n    productUrlIntegration: {\n      active: hasProductUrl,\n      url: productFocusUrl,\n      purpose: productUrlPurpose,\n      status: hasProductUrl ? 'active' : 'inactive',\n      impact: hasProductUrl ? 'Content will be aligned with URL context' : 'No URL alignment'\n    },\n    \n    // Legacy fields (maintaining compatibility)\n    issues: criticalIssues,\n    enhancementIssues: enhancementOpportunities,\n    readyForGeneration: criticalIssues.length === 0,\n    qualityScore: contentQualityScore,\n    \n    // Enhanced tracking\n    integrationCompleteness: {\n      totalActive: totalIntegrations,\n      maxPossible: maxIntegrations,\n      percentage: integrationPercentage,\n      level: integrationPercentage >= 80 ? 'excellent' : \n             integrationPercentage >= 60 ? 'good' : \n             integrationPercentage >= 40 ? 'moderate' : 'limited'\n    },\n    \n    // Recommendations\n    recommendations: {\n      criticalActions: criticalIssues.length > 0 ? ['Resolve critical issues before proceeding'] : [],\n      enhancementActions: enhancementOpportunities.slice(0, 3), // Top 3 recommendations\n      contentStrategy: integrationPercentage >= 70 ? 'comprehensive' : \n                      integrationPercentage >= 40 ? 'balanced' : 'basic'\n    },\n    \n    // Overall assessment\n    overallAssessment: {\n      readyForGeneration: criticalIssues.length === 0,\n      contentQualityScore: contentQualityScore,\n      integrationLevel: integrationPercentage >= 80 ? 'premium' :\n                       integrationPercentage >= 60 ? 'enhanced' :\n                       integrationPercentage >= 40 ? 'standard' : 'basic',\n      formDataUtilized: hasSeoKeywords || hasProductUrl,\n      businessDataUtilized: integrationStatus.businessNotes || integrationStatus.customGlobalRules,\n      enhancementRecommendations: enhancementOpportunities.length\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3008,
        -240
      ],
      "id": "73010e1b-1760-475d-b843-9ed675c91d03",
      "name": "Debug Content Generation"
    },
    {
      "parameters": {
        "jsCode": "// Get data from previous nodes\nconst businessFolderData = $('Find Business Folder').item.json;\nconst dynamicData = $('Prepare Dynamic Data').item.json;\nconst formSubData = $('Process Form Data').first().json.property_specific_topic.rich_text[0].plain_text;\n1\nconsole.log('=== CREATE CONTENT FOLDER DEBUG ===');\nconsole.log('Full dynamic data:', JSON.stringify(dynamicData, null, 2).substring(0, 1000));\n\n// FIXED: Try multiple sources for the specific topic\nlet specificTopic = '';\nlet businessName = '';\n\n// Try to get business name\nbusinessName = dynamicData.businessName || dynamicData.formData?.businessName || 'Business';\n\n// Try to get specific topic from multiple sources\nif (formSubData && formSubData.specificTopic !== 'Content') {\n  specificTopic = formSubData;\n} else if (formSubData) {\n  specificTopic = formSubData;\n} else {\n  // Try to access the original form data directly\n  try {\n    const processFormData = $('Process Form Data').item.json;\n    specificTopic = processFormData['Specific Topic'] || processFormData.specificTopic || '';\n    console.log('✅ Got specific topic from Process Form Data:', specificTopic);\n  } catch (e) {\n    console.log('⚠️ Could not access Process Form Data:', e.message);\n  }\n}\n\n// If still no topic, use contentName or fallback\nif (!specificTopic || specificTopic === 'Content') {\n  specificTopic = dynamicData.contentName || 'Generated Content';\n  console.log('⚠️ Using fallback topic:', specificTopic);\n}\n\nconsole.log('Final values:');\nconsole.log('Business Name:', businessName);\nconsole.log('Specific Topic:', specificTopic);\n\n// Create meaningful folder name\nconst contentTitle = `${businessName}_${specificTopic}`;\n\n// Clean the title for folder name (more aggressive cleaning)\nconst cleanFolderName = contentTitle\n  .replace(/[<>:\"/\\\\|?*\\s]/g, '') // Remove forbidden chars AND spaces\n  .replace(/[^a-zA-Z0-9_-]/g, '') // Keep only alphanumeric, underscore, hyphen\n  .substring(0, 60); // Shorter limit\n\n// Add timestamp for uniqueness\nconst now = new Date();\nconst timestamp = now.toTimeString().slice(0, 8).replace(/:/g, '');\nconst datestamp = now.toISOString().slice(0, 10);\nconst uniqueFolderName = `${cleanFolderName}_${datestamp}_${timestamp}`;\n\nconsole.log('Clean folder name:', cleanFolderName);\nconsole.log('Unique folder name:', uniqueFolderName);\n\nreturn {\n  json: {\n    parentFolderId: businessFolderData.id,\n    folderName: uniqueFolderName,\n    cleanFolderName: cleanFolderName,\n    originalTitle: contentTitle,\n    timestamp: timestamp,\n    datestamp: datestamp,\n    businessFolderName: businessFolderData.name,\n    \n    // Debug info\n    debug: {\n      businessName: businessName,\n      specificTopic: specificTopic,\n      specificTopicSource: dynamicData.specificTopic ? 'dynamicData' : \n                          dynamicData.formData?.specificTopic ? 'formData' : 'fallback',\n      hasValidTopic: !!(specificTopic && specificTopic !== 'Content' && specificTopic !== 'Generated Content'),\n      folderNameLength: uniqueFolderName.length,\n      cleanFolderNameLength: cleanFolderName.length\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        464
      ],
      "id": "8a7a5f86-5a55-4192-9d74-e03a043bda4f",
      "name": "Create Content Folder"
    },
    {
      "parameters": {
        "jsCode": "// Fixed: Prepare Google Doc Content with proper N8N node access\nconsole.log('=== PREPARING GOOGLE DOC WITH ACTUAL CONTENT ===');\n\nconst data = $input.item.json;\n\n// Initialize variables with defaults\nlet longformContent = 'Content generation in progress...';\nlet shortformContent = 'Content generation in progress...';\nlet businessName = 'Business';\nlet specificTopic = 'Generated Content';\n\n// Get the actual generated content using proper N8N syntax\ntry {\n  const longformNode = $('GENERATE TEXT').first().json;\n  longformContent = longformNode.output || 'Content generation error';\n  console.log('✅ Got longform content:', longformContent.length, 'characters');\n} catch (e) {\n  console.log('⚠️ Could not access GENERATE TEXT node:', e.message);\n  longformContent = 'Please check GENERATE TEXT node output';\n}\n\ntry {\n  const shortformNode = $('GENERATE SHORTFORM TEXT').first().json;\n  shortformContent = shortformNode.output || 'Content generation error';\n  console.log('✅ Got shortform content:', shortformContent.length, 'characters');\n} catch (e) {\n  console.log('⚠️ Could not access GENERATE SHORTFORM TEXT node:', e.message);\n  shortformContent = 'Please check GENERATE SHORTFORM TEXT node output';\n}\n\n// Remove word counts if present\nlongformContent = longformContent.replace(/\\n\\nWORD COUNT:.*$/i, '').trim();\nshortformContent = shortformContent.replace(/\\n\\nWORD COUNT:.*$/i, '').trim();\n\n// Get business name and topic from Prepare Dynamic Data node\ntry {\n  const dynamicData = $('Process Form Data').first().json\n  if (dynamicData.selectedBusinessName) {\n    businessName = dynamicData.selectedBusinessName;\n    console.log('✅ Got business name from Prepare Dynamic Data:', businessName);\n  }\n  if (dynamicData.name) {\n    specificTopic = dynamicData.name;\n    console.log('✅ Got specific topic from Prepare Dynamic Data:', specificTopic);\n  }\n} catch (error) {\n  console.log('⚠️ Could not access Prepare Dynamic Data:', error.message);\n}\n\nconst docTitleFull = `${businessName}_${specificTopic}`;\n\nconst cleanName = docTitleFull\n  .replace(/[<>:\"/\\\\|?*\\s]/g, '') // Remove forbidden chars AND spaces\n  .replace(/[^a-zA-Z0-9_-]/g, '') // Keep only alphanumeric, underscore, hyphen\n  .substring(0, 60); // Shorter limit\n\n// Fallback: try to get data from Process Form Data node\nif (businessName === 'Business' || specificTopic === 'Generated Content') {\n  try {\n    const formData = $('Process Form Data').item.json;\n    if (formData['Business Name'] && businessName === 'Business') {\n      businessName = formData['Business Name'];\n      console.log('✅ Got business name from Process Form Data:', businessName);\n    }\n    if (formData['Specific Topic'] && specificTopic === 'Generated Content') {\n      specificTopic = formData['Specific Topic'];\n      console.log('✅ Got specific topic from Process Form Data:', specificTopic);\n    }\n  } catch (error) {\n    console.log('⚠️ Could not access Process Form Data:', error.message);\n  }\n}\n\nconsole.log('Final document title info:', { businessName, specificTopic });\n\nconst documentContent = `❗ DISCLAIMER\n═══════════════════════════════════════\nPlease check all content carefully before you post it. AI can make mistakes. Check and correct important info.\n\nImages can also be incorrect and are only provided as an alternative to your own images.\n\nIf you require any changes in how your content and images are produced, contact Kevin via admin@kevinrmiddleton.com or WhatsApp 07926676298\n═══════════════════════════════════════\n\n${specificTopic}\n\n📱 SHORTFORM VERSION\n═══════════════════════════════════════\n\n${shortformContent}\n\n📘 LINKEDIN/BLOG/NEWSLETTER VERSION\n═══════════════════════════════════════\n\n${longformContent}\n\n🖼️ IMAGE USAGE GUIDE\n═══════════════════════════════════════\n\n💡 Quick Platform Guide:\n   • Instagram → Use Original or Square (if available)\n   • Facebook → Use Universal (if available) or Original\n   • LinkedIn → Use Universal (if available) or Original\n   • Twitter → Use Universal (if available) or Original\n   • YouTube → Use Universal (if available) or Original\n═══════════════════════════════════════`;\n\nreturn {\n  json: {\n    content: documentContent,\n    docTitle: cleanName,\n    folderId: data.targetFolder || data.folderId || 'default'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1824,
        928
      ],
      "id": "0cd64be4-4628-4150-b9f5-b9ac7a28ec26",
      "name": "Prepare Google Doc Content"
    },
    {
      "parameters": {
        "folderId": "={{ $('Prepare Google Doc Content').item.json.folderId }}",
        "title": "={{ $('Prepare Google Doc Content').item.json.docTitle }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2112,
        928
      ],
      "id": "e9f0df4d-df26-4ec6-b7dc-9e7a5f69b9cb",
      "name": "Google Docs Create Document",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "vgB2s8Ok149DlvZF",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ENHANCED Notion Update - Uses correct data flow path WITH NEW FIELDS INTEGRATION\n// ENHANCED VERSION: Includes reporting for SEO Strategy, Notes, and Global Content Rules\nconsole.log('=== ENHANCED NOTION UPDATE WITH NEW FIELDS INTEGRATION ===');\n\n// Get Google Docs data from the input (this is what we receive)\nconst googleDocData = $input.item.json;\nconsole.log('✅ Google Doc data received:', googleDocData);\n\n// Get data from nodes that are accessible through the workflow\nlet dynamicData = null;\nlet imageOptimization = null;\nlet uploadData = null;\nlet generatedText = '';\nlet twitterText = '';\nlet originalImageData = null;\n\n// Get all required data with error handling\ntry {\n  dynamicData = $('Prepare Dynamic Data').item.json;\n  console.log('✅ Dynamic data found');\n} catch (e) {\n  console.log('⚠️ Dynamic data not accessible:', e.message);\n  dynamicData = {\n    contentId: 'unknown',\n    businessName: 'Business',\n    socialContentType: 'Content',\n    specificTopic: 'Generated Content',\n    // NEW: Default values for enhanced fields\n    hasSeoStrategy: false,\n    hasBusinessNotes: false,\n    hasCustomRules: false,\n    enhancedFieldsIntegration: {\n      seoStrategy: false,\n      businessNotes: false,\n      customGlobalRules: false,\n      allFieldsActive: false\n    }\n  };\n}\n\ntry {\n  imageOptimization = $('Optimize Image Prompt').item.json;\n  console.log('✅ Image optimization data found');\n} catch (e) {\n  console.log('⚠️ Image optimization data not accessible:', e.message);\n  imageOptimization = { qualityScore: 0.8 };\n}\n\ntry {\n  uploadData = $('Prepare Upload Data').item.json;\n  console.log('✅ Upload data found');\n} catch (e) {\n  console.log('⚠️ Upload data not accessible:', e.message);\n  uploadData = {\n    folderUrl: 'Processing...',\n    parentFolderId: 'unknown',\n    folderName: 'Generated Content'\n  };\n}\n\ntry {\n  generatedText = $('GENERATE TEXT').item.json.output;\n  console.log('✅ Generated text found:', generatedText.length, 'characters');\n} catch (e) {\n  console.log('⚠️ Generated text not accessible:', e.message);\n  generatedText = 'Content generated successfully - see Google Doc for full details';\n}\n\ntry {\n  twitterText = $('GENERATE SHORTFORM TEXT').item.json.output;\n  console.log('✅ Twitter text found:', twitterText.length, 'characters');\n} catch (e) {\n  console.log('⚠️ Twitter text not accessible:', e.message);\n  twitterText = 'Twitter content generated - see Google Doc for details';\n}\n\ntry {\n  originalImageData = $('Google Drive Upload').item.json;\n  console.log('✅ Original image data found');\n} catch (e) {\n  console.log('⚠️ Original image data not accessible:', e.message);\n  originalImageData = {\n    name: 'Generated Image',\n    webViewLink: 'Processing...'\n  };\n}\n\n// Calculate metrics safely\nconst twitterLength = twitterText.length;\nconst twitterCompliant = twitterLength <= 280;\nconst regularLength = generatedText.length;\n\n// NEW: Enhanced fields status for reporting\nconst enhancedFieldsStatus = {\n  seoStrategy: dynamicData.hasSeoStrategy || false,\n  businessNotes: dynamicData.hasBusinessNotes || false,\n  customRules: dynamicData.hasCustomRules || false,\n  integrationLevel: dynamicData.enhancedFieldsIntegration?.allFieldsActive ? 'Complete' : 'Partial'\n};\n\nconsole.log('');\nconsole.log('=== NEW ENHANCED FIELDS STATUS ===');\nconsole.log('SEO Strategy Applied:', enhancedFieldsStatus.seoStrategy ? '✅ YES' : '❌ NO');\nconsole.log('Business Notes Included:', enhancedFieldsStatus.businessNotes ? '✅ YES' : '❌ NO');\nconsole.log('Custom Rules Active:', enhancedFieldsStatus.customRules ? '✅ YES' : '❌ NO');\nconsole.log('Integration Level:', enhancedFieldsStatus.integrationLevel);\n\n// Compile file links\nconst fileLinks = {\n  originalImage: originalImageData.webViewLink || 'Processing...',\n  googleDoc: googleDocData.documentId ? `https://docs.google.com/document/d/${googleDocData.documentId}/edit` : 'Processing...',\n  contentFolder: uploadData.folderUrl || 'Processing...',\n  parentFolder: uploadData.parentFolderId ? `https://drive.google.com/drive/folders/${uploadData.parentFolderId}` : 'Processing...'\n};\n\n// Note: We can't access Collect Resized Images data from here due to the data flow,\n// but the Google Doc already contains the image processing information\nconsole.log('ℹ️ Image processing details are available in the Google Doc');\n\n// NEW: Create enhanced summary with new fields information\nconst enhancementDetails = `\n🔧 ENHANCED FEATURES ACTIVE:\n${enhancedFieldsStatus.seoStrategy ? '✅ SEO Strategy: Business-specific keyword optimization applied' : '⚠️ SEO Strategy: Using general SEO practices'}\n${enhancedFieldsStatus.businessNotes ? '✅ Business Notes: Unique context and selling points included' : '⚠️ Business Notes: Generic business approach used'}\n${enhancedFieldsStatus.customRules ? '✅ Custom Rules: Business-specific content guidelines applied' : '⚠️ Custom Rules: Default workflow rules used'}\n\n🎯 INTEGRATION LEVEL: ${enhancedFieldsStatus.integrationLevel}\n📈 CONTENT OPTIMIZATION: ${enhancedFieldsStatus.seoStrategy && enhancedFieldsStatus.businessNotes && enhancedFieldsStatus.customRules ? 'Fully Optimized' : 'Standard Quality'}`;\n\n// Create comprehensive summary\nconst enhancedSummary = `📊 COMPLETE CONTENT PACKAGE\n═══════════════════════════════════════\n✅ Content Type: ${dynamicData.socialContentType}\n🏢 Business: ${dynamicData.businessName}\n🎯 Topic: ${dynamicData.specificTopic || 'From content brief'}\n\n📝 CONTENT VERSIONS:\n- Regular Content: ${regularLength} characters\n- Twitter Content: ${twitterLength}/280 characters\n- Twitter Compliant: ${twitterCompliant ? '✅ Yes' : '❌ No'}\n\n🖼️ IMAGE VERSIONS:\n- Original: ${originalImageData.name}\n- Additional Sizes: See Google Doc for processing details\n\n🔗 QUICK ACCESS LINKS:\n📁 Content Folder: ${fileLinks.contentFolder}\n📄 Document: ${fileLinks.googleDoc}\n🖼️ Original Image: ${fileLinks.originalImage}\n\n📊 QUALITY METRICS:\n- Image Quality: ${Math.round(imageOptimization.qualityScore * 100)}%\n- Content Quality: ${imageOptimization.qualityScore >= 0.8 ? 'Excellent' : 'Good'}\n${enhancementDetails}\n\nGenerated: ${new Date().toLocaleString('en-GB')}\nWorkflow: N8N Enhanced Social Media Generator v4.0 (Enhanced Fields)\nStatus: Successfully completed`;\n\n// Prepare update data for Notion\nconst updateData = {\n  \"Generated Content\": generatedText,\n  \"Twitter Content\": twitterText,\n  \"Status\": \"Published\",\n  \"Word Count\": regularLength,\n  \"Twitter Character Count\": twitterLength,\n  \"Featured Image File\": fileLinks.originalImage,\n  \"Google Doc Link\": fileLinks.googleDoc,\n  \"Content Folder\": fileLinks.contentFolder,\n  \"Generation Summary\": enhancedSummary,\n  \"Publish Date\": new Date().toISOString(),\n  \"Quality Score\": Math.round(imageOptimization.qualityScore * 100),\n  // NEW: Enhanced fields status (if these fields exist in your Notion database)\n  \"SEO Optimization\": enhancedFieldsStatus.seoStrategy ? \"Applied\" : \"Standard\",\n  \"Business Context\": enhancedFieldsStatus.businessNotes ? \"Included\" : \"Generic\",\n  \"Custom Rules\": enhancedFieldsStatus.customRules ? \"Business-Specific\" : \"Default\"\n};\n\nconsole.log('=== FINAL PUBLICATION UPDATE (ENHANCED) ===');\nconsole.log('Content ID:', dynamicData.contentId);\nconsole.log('✅ Regular Content:', regularLength, 'characters');\nconsole.log('✅ Twitter Content:', twitterLength, 'characters');\nconsole.log('✅ Twitter Compliant:', twitterCompliant);\nconsole.log('✅ Original Image:', originalImageData.name);\nconsole.log('✅ Google Doc ID:', googleDocData.documentId);\nconsole.log('NEW ENHANCED FEATURES:');\nconsole.log('✅ SEO Strategy:', enhancedFieldsStatus.seoStrategy ? 'INTEGRATED' : 'Default practices');\nconsole.log('✅ Business Notes:', enhancedFieldsStatus.businessNotes ? 'INTEGRATED' : 'Generic approach');\nconsole.log('✅ Custom Rules:', enhancedFieldsStatus.customRules ? 'BUSINESS-SPECIFIC' : 'Default workflow');\nconsole.log('✅ Integration Level:', enhancedFieldsStatus.integrationLevel);\nconsole.log('✅ Enhanced workflow completed successfully');\n\nreturn {\n  json: {\n    contentId: dynamicData.contentId,\n    updateData: updateData,\n    fileLinks: fileLinks,\n    \n    // NEW: Enhanced fields reporting\n    enhancedFieldsReport: {\n      seoStrategy: {\n        active: enhancedFieldsStatus.seoStrategy,\n        impact: enhancedFieldsStatus.seoStrategy ? 'Business-specific SEO optimization applied' : 'Using general SEO practices',\n        content: dynamicData.seoStrategy || null\n      },\n      businessNotes: {\n        active: enhancedFieldsStatus.businessNotes,\n        impact: enhancedFieldsStatus.businessNotes ? 'Unique business context included' : 'Generic business approach',\n        content: dynamicData.businessNotes || null\n      },\n      customRules: {\n        active: enhancedFieldsStatus.customRules,\n        impact: enhancedFieldsStatus.customRules ? 'Business-specific content rules applied' : 'Default workflow rules used',\n        source: dynamicData.rulesSource || 'workflow_default'\n      },\n      integrationLevel: enhancedFieldsStatus.integrationLevel,\n      overallEnhancement: enhancedFieldsStatus.seoStrategy && enhancedFieldsStatus.businessNotes && enhancedFieldsStatus.customRules ? 'Fully Enhanced' : 'Partially Enhanced'\n    },\n    \n    success: {\n      contentGenerated: !!generatedText && generatedText !== 'Content generated successfully - see Google Doc for full details',\n      twitterContentGenerated: !!twitterText && twitterText !== 'Twitter content generated - see Google Doc for details',\n      imageCreated: !!originalImageData.name && originalImageData.name !== 'Generated Image',\n      documentCreated: !!googleDocData.documentId,\n      folderCreated: !!uploadData.folderUrl && uploadData.folderUrl !== 'Processing...',\n      notionUpdated: true,\n      twitterCompliant: twitterCompliant,\n      workflowCompleted: true,\n      // NEW: Enhanced features success tracking\n      enhancedFeaturesActive: {\n        seoStrategy: enhancedFieldsStatus.seoStrategy,\n        businessNotes: enhancedFieldsStatus.businessNotes,\n        customRules: enhancedFieldsStatus.customRules,\n        totalEnhancements: [enhancedFieldsStatus.seoStrategy, enhancedFieldsStatus.businessNotes, enhancedFieldsStatus.customRules].filter(Boolean).length\n      }\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2752,
        928
      ],
      "id": "8beadb33-fa86-441a-8af2-f0ae2ae5f9c5",
      "name": "Enhanced Notion Update"
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('Create Content Folder').item.json.folderName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Create Content Folder').item.json.parentFolderId }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1504,
        464
      ],
      "id": "239f98e6-765b-4a13-bd0f-16f07fcda2fc",
      "name": "Google Drive Create Folder",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "lml9nJV2CfuBJkTv",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "name": "={{ $('Prepare Upload Data').item.json.fileName }}",
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Prepare Upload Data').item.json.folderId }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1952,
        464
      ],
      "id": "94a1bfdb-2ff7-4e7b-8273-37115de89424",
      "name": "Google Drive Upload",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "lml9nJV2CfuBJkTv",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $('Google Docs Create Document').item.json.id }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $('Prepare Google Doc Content').item.json.content }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2432,
        928
      ],
      "id": "7a95cce2-8b31-4e0d-8c79-d51842c6be19",
      "name": "Google Docs Add Content",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "vgB2s8Ok149DlvZF",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        2528,
        256
      ],
      "id": "614274de-c8ec-43f8-9048-30495cc8593a",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "HeH56rgJOcdcDo42",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Download & Resize Images - Cloudinary Version (COMPLETE FIXED VERSION)\nconst uploadData = $('Prepare Upload Data').item.json;\nconst originalImageData = $('Google Drive Upload').item.json;\n\nconsole.log('=== CREATING RESIZED IMAGE SPECIFICATIONS (CLOUDINARY FIXED) ===');\nconsole.log('Original image:', originalImageData.name);\n\n// FIXED: Your Cloudinary cloud name\nconst CLOUDINARY_CLOUD_NAME = 'dap9syiqx';\n\n// Two image types that cover all social media needs\nconst imageTypes = {\n  universal: { \n    width: 1200, \n    height: 630, \n    name: 'Universal',\n    description: 'Landscape format for Facebook, LinkedIn, Twitter, YouTube thumbnails'\n  },\n  square: { \n    width: 1080, \n    height: 1080, \n    name: 'Square',\n    description: 'Square format for Instagram posts, Facebook posts, LinkedIn posts'\n  }\n};\n\n// Extract Google Drive file ID\nlet fileId = null;\nif (originalImageData.webViewLink) {\n  const fileIdMatch = originalImageData.webViewLink.match(/\\/file\\/d\\/([a-zA-Z0-9-_]+)/);\n  if (fileIdMatch) {\n    fileId = fileIdMatch[1];\n  }\n}\n\nif (!fileId && originalImageData.id) {\n  fileId = originalImageData.id;\n}\n\nif (!fileId) {\n  throw new Error('Could not extract Google Drive file ID');\n}\n\n// Create PUBLIC VIEW URL\nconst publicImageUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;\n\nconsole.log('✅ Using Cloudinary with source URL:', publicImageUrl);\n\n// FIXED: Create resize specifications using Cloudinary with CORRECTED parameters\nconst resizeJobs = Object.entries(imageTypes).map(([key, specs]) => ({\n  type: key,\n  typeName: specs.name,\n  width: specs.width,\n  height: specs.height,\n  description: specs.description,\n  fileName: `${uploadData.baseFileName}_${specs.name}_${uploadData.timestamp}.png`,\n  folderId: uploadData.folderId,\n  originalImageUrl: publicImageUrl,\n  // FIXED: More specific Cloudinary transformations with proper aspect ratio handling\n  cloudinaryUrl: key === 'universal' \n    ? `https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/image/fetch/w_1200,h_630,c_fill,g_center,q_auto,f_png/${encodeURIComponent(publicImageUrl)}`\n    : `https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/image/fetch/w_1080,h_1080,c_fill,g_center,q_auto,f_png/${encodeURIComponent(publicImageUrl)}`,\n  status: 'ready_for_download'\n}));\n\nconsole.log('Created', resizeJobs.length, 'resize jobs with FIXED Cloudinary URLs');\nresizeJobs.forEach(job => {\n  console.log(`- ${job.typeName}: ${job.width}x${job.height}`);\n  console.log(`  URL: ${job.cloudinaryUrl.substring(0, 100)}...`);\n});\n\nreturn {\n  json: {\n    originalImage: originalImageData,\n    resizeJobs: resizeJobs,\n    totalJobs: resizeJobs.length,\n    targetFolder: uploadData.folderId,\n    publicImageUrl: publicImageUrl,\n    cloudinaryCloudName: CLOUDINARY_CLOUD_NAME,\n    service: 'cloudinary_fixed', // Track which version we're using\n    fileId: fileId,\n    imageTypes: {\n      original: {\n        name: originalImageData.name,\n        size: '1024x1024',\n        description: 'AI-generated original - good for Instagram, general use'\n      },\n      universal: {\n        size: '1200x630',\n        description: 'Perfect for Facebook, LinkedIn, Twitter, YouTube'\n      },\n      square: {\n        size: '1080x1080', \n        description: 'Optimized for Instagram posts, Facebook posts'\n      }\n    },\n    ready: true,\n    debug: {\n      urlsGenerated: resizeJobs.map(job => ({\n        type: job.type,\n        size: `${job.width}x${job.height}`,\n        url: job.cloudinaryUrl\n      }))\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2208,
        464
      ],
      "id": "4ffa18e3-7413-45b2-83ee-a6f35f9218eb",
      "name": "Download & Resize Images"
    },
    {
      "parameters": {
        "url": "={{ $('Download & Resize Images').item.json.resizeJobs.find(job => job.type === 'universal').cloudinaryUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2432,
        464
      ],
      "id": "f841bb3a-a2be-4b1f-9bc5-87226fe0ab48",
      "name": "Download Universal Image"
    },
    {
      "parameters": {
        "url": "={{ $('Download & Resize Images').item.json.resizeJobs.find(job => job.type === 'square').cloudinaryUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2640,
        464
      ],
      "id": "1641847b-6c26-46fb-a43b-0eb1909c3741",
      "name": "Download Square Image"
    },
    {
      "parameters": {
        "name": "={{ $('Download & Resize Images').item.json.resizeJobs.find(job => job.type === 'universal').fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Download & Resize Images').item.json.targetFolder }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        912,
        704
      ],
      "id": "feabc056-4b9f-4fa1-8b38-755a8571d659",
      "name": "Upload Universal Image",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "lml9nJV2CfuBJkTv",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "name": "={{ $('Download & Resize Images').item.json.resizeJobs.find(job => job.type === 'square').fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Download & Resize Images').item.json.targetFolder }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        3104,
        560
      ],
      "id": "40ee0c3f-ee9f-494f-a230-bfeb3d3ea7f1",
      "name": "Upload Square Image",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "lml9nJV2CfuBJkTv",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Fixed Collect Resized Images - Handles missing uploads gracefully with better error detection\nconst resizeSpecs = $('Download & Resize Images').item.json;\n\nconsole.log('=== COLLECTING RESIZED IMAGES (DEBUG VERSION) ===');\nconsole.log('Resize specs:', resizeSpecs);\n\n// Collect upload results from both image types with improved error handling\nconst uploadResults = [];\n\n// Try to get Universal image upload with better debugging\nconsole.log('--- CHECKING UNIVERSAL IMAGE UPLOAD ---');\ntry {\n  const universalUploadNode = $('Upload Universal Image');\n  console.log('Universal upload node available:', !!universalUploadNode);\n  \n  if (universalUploadNode) {\n    const universalImage = universalUploadNode.item.json;\n    console.log('Universal image data:', JSON.stringify(universalImage, null, 2));\n    console.log('Universal image has ID:', !!universalImage?.id);\n    console.log('Universal image has name:', !!universalImage?.name);\n    console.log('Universal image structure check - id:', universalImage?.id, 'name:', universalImage?.name);\n    \n    if (universalImage && (universalImage.id || universalImage.name)) {\n      uploadResults.push({\n        type: 'universal',\n        name: 'Universal (1200x630)',\n        file: universalImage,\n        description: 'Perfect for Facebook, LinkedIn, Twitter, YouTube',\n        platforms: ['Facebook', 'LinkedIn', 'Twitter', 'YouTube'],\n        status: 'uploaded'\n      });\n      console.log('✅ Universal image marked as SUCCESS:', universalImage.name || universalImage.id);\n    } else {\n      console.log('⚠️ Universal image data structure issue - missing both id and name');\n      console.log('Full universal image object:', universalImage);\n      uploadResults.push({\n        type: 'universal',\n        name: 'Universal (1200x630)',\n        file: null,\n        description: 'Perfect for Facebook, LinkedIn, Twitter, YouTube',\n        platforms: ['Facebook', 'LinkedIn', 'Twitter', 'YouTube'],\n        status: 'failed',\n        error: 'Upload data structure issue - missing id/name fields'\n      });\n    }\n  } else {\n    console.log('⚠️ Universal upload node not accessible');\n    uploadResults.push({\n      type: 'universal',\n      name: 'Universal (1200x630)',\n      file: null,\n      description: 'Perfect for Facebook, LinkedIn, Twitter, YouTube',\n      platforms: ['Facebook', 'LinkedIn', 'Twitter', 'YouTube'],\n      status: 'failed',\n      error: 'Upload node not accessible'\n    });\n  }\n} catch (error) {\n  console.log('⚠️ Universal image upload error caught:', error.message);\n  console.log('Error details:', error);\n  uploadResults.push({\n    type: 'universal',\n    name: 'Universal (1200x630)',\n    file: null,\n    description: 'Perfect for Facebook, LinkedIn, Twitter, YouTube',\n    platforms: ['Facebook', 'LinkedIn', 'Twitter', 'YouTube'],\n    status: 'failed',\n    error: `Exception: ${error.message}`\n  });\n}\n\n// Try to get Square image upload with better debugging\nconsole.log('--- CHECKING SQUARE IMAGE UPLOAD ---');\ntry {\n  const squareUploadNode = $('Upload Square Image');\n  console.log('Square upload node available:', !!squareUploadNode);\n  \n  if (squareUploadNode) {\n    const squareImage = squareUploadNode.item.json;\n    console.log('Square image data:', JSON.stringify(squareImage, null, 2));\n    console.log('Square image has ID:', !!squareImage?.id);\n    console.log('Square image has name:', !!squareImage?.name);\n    \n    if (squareImage && (squareImage.id || squareImage.name)) {\n      uploadResults.push({\n        type: 'square',\n        name: 'Square (1080x1080)',\n        file: squareImage,\n        description: 'Optimized for Instagram posts, Facebook posts',\n        platforms: ['Instagram', 'Facebook Posts'],\n        status: 'uploaded'\n      });\n      console.log('✅ Square image marked as SUCCESS:', squareImage.name || squareImage.id);\n    } else {\n      console.log('⚠️ Square image data structure issue - missing both id and name');\n      console.log('Full square image object:', squareImage);\n      uploadResults.push({\n        type: 'square',\n        name: 'Square (1080x1080)',\n        file: null,\n        description: 'Optimized for Instagram posts, Facebook posts',\n        platforms: ['Instagram', 'Facebook Posts'],\n        status: 'failed',\n        error: 'Upload data structure issue - missing id/name fields'\n      });\n    }\n  } else {\n    console.log('⚠️ Square upload node not accessible');\n    uploadResults.push({\n      type: 'square',\n      name: 'Square (1080x1080)',\n      file: null,\n      description: 'Optimized for Instagram posts, Facebook posts',\n      platforms: ['Instagram', 'Facebook Posts'],\n      status: 'failed',\n      error: 'Upload node not accessible'\n    });\n  }\n} catch (error) {\n  console.log('⚠️ Square image upload error caught:', error.message);\n  console.log('Error details:', error);\n  uploadResults.push({\n    type: 'square',\n    name: 'Square (1080x1080)',\n    file: null,\n    description: 'Optimized for Instagram posts, Facebook posts',\n    platforms: ['Instagram', 'Facebook Posts'],\n    status: 'failed',\n    error: `Exception: ${error.message}`\n  });\n}\n\n// Count successful uploads\nconst successfulUploads = uploadResults.filter(result => result.status === 'uploaded');\nconst failedUploads = uploadResults.filter(result => result.status === 'failed');\n\nconsole.log('=== UPLOAD RESULTS SUMMARY ===');\nconsole.log('Total upload results:', uploadResults.length);\nconsole.log('Successful uploads:', successfulUploads.length);\nconsole.log('Failed uploads:', failedUploads.length);\n\nsuccessfulUploads.forEach(result => {\n  console.log(`✅ ${result.name}: ${result.file?.name || result.file?.id || 'Unknown file'}`);\n  console.log(`   Platforms: ${result.platforms.join(', ')}`);\n});\n\nfailedUploads.forEach(result => {\n  console.log(`❌ ${result.name}: ${result.error}`);\n});\n\n// Alternative approach: Check if files exist in Google Drive based on expected naming pattern\nconsole.log('=== ALTERNATIVE FILE EXISTENCE CHECK ===');\nif (resizeSpecs && resizeSpecs.resizeJobs) {\n  resizeSpecs.resizeJobs.forEach(job => {\n    console.log(`Expected file: ${job.fileName} for ${job.typeName}`);\n  });\n}\n\n// Create comprehensive response\nconst response = {\n  json: {\n    originalImage: {\n      file: resizeSpecs.originalImage,\n      size: '1024x1024',\n      description: 'AI-generated original',\n      platforms: ['Instagram', 'General Use'],\n      name: 'Original (1024x1024)'\n    },\n    resizedImages: uploadResults,\n    totalResized: successfulUploads.length,\n    totalAttempted: uploadResults.length,\n    targetFolder: resizeSpecs.targetFolder,\n    summary: `Created ${successfulUploads.length} additional image sizes`,\n    allUploadsComplete: successfulUploads.length === 2,\n    hasFailures: failedUploads.length > 0,\n    imageGuide: {\n      original: 'Use for Instagram posts, profile images, general sharing',\n      universal: 'Use for Facebook, LinkedIn, Twitter posts, YouTube thumbnails',\n      square: 'Use for Instagram posts (optimized), Facebook posts'\n    },\n    status: {\n      universal: uploadResults.find(r => r.type === 'universal')?.status || 'unknown',\n      square: uploadResults.find(r => r.type === 'square')?.status || 'unknown'\n    },\n    debug: {\n      resizeSpecsAvailable: !!resizeSpecs,\n      originalImageAvailable: !!resizeSpecs?.originalImage,\n      targetFolderAvailable: !!resizeSpecs?.targetFolder,\n      processingComplete: successfulUploads.length >= 1, // At least one should succeed\n      detailedResults: uploadResults.map(result => ({\n        type: result.type,\n        status: result.status,\n        hasFile: !!result.file,\n        fileName: result.file?.name || 'N/A',\n        fileId: result.file?.id || 'N/A',\n        error: result.error || 'None'\n      }))\n    }\n  }\n};\n\n// Log final status\nconsole.log('=== FINAL COLLECTION STATUS ===');\nconsole.log('All uploads complete:', response.json.allUploadsComplete);\nconsole.log('Has failures:', response.json.hasFailures);\nconsole.log('Processing status: READY FOR DOCUMENT CREATION');\nconsole.log('Detailed debug results:', response.json.debug.detailedResults);\n\nreturn response;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        928
      ],
      "id": "747b519c-b56d-4b24-bc5a-5ecfb9b44c18",
      "name": "Collect Resized Images"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1344,
        928
      ],
      "id": "5c59251c-f88d-4cff-b2dc-fb551e951fe2",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Add this as a new Code node after Prepare Dynamic Data\nconst dynamicData = $input.item.json;\n\n// Skip if this item should be skipped\nif (dynamicData.skip) {\n  console.log(`⏭️ SKIPPING: ${dynamicData.reason} (${dynamicData.businessName})`);\n  return { json: dynamicData }; // Pass through skip data\n}\n\nconsole.log(`🚀 PROCESSING: ${dynamicData.businessName} - ${dynamicData.contentName}`);\nreturn { json: dynamicData }; // Continue processing"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2768,
        -240
      ],
      "id": "f57d3c0c-301b-4e02-a6fd-f4bd993bc3c1",
      "name": "Error Handling"
    },
    {
      "parameters": {
        "jsCode": "// Process Form Submission Data - FIXED WORD COUNT SYSTEM\nconst formData = $json;\n\nconsole.log('=== PROCESSING FORM SUBMISSION (FIXED WORD COUNT SYSTEM) ===');\nconsole.log('Form data received:', formData);\n\n// Extract form fields\nconst businessName = formData['Business Name'];\nconst socialContentType = formData['Social Content Type'];\nconst specificTopic = formData['Specific Topic'];\nconst contentBrief = formData['Content Brief'];\nconst wordCountTarget = formData['Word Count Target'] || '1500';\nconst productFocusUrl = formData['Product Focus URL'] || '';\nconst ctaUrl = formData['CTA URL'] || '';\nconst seoKeywords = formData['SEO Keywords'] || '';\n\n// FIXED: Extract and process word count target for shortform content\nconsole.log('=== WORD COUNT DEBUG ===');\nconsole.log('Raw form data Word Count Target:', formData['Word Count Target']);\nconsole.log('Type of Word Count Target:', typeof formData['Word Count Target']);\n\nconst rawWordCountTarget = formData['Word Count Target'];\nlet shortformWordCount;\n\nif (rawWordCountTarget && rawWordCountTarget !== '') {\n  shortformWordCount = parseInt(rawWordCountTarget);\n  console.log('Parsed word count from form:', shortformWordCount);\n  \n  // Validate the parsed number is reasonable\n  if (isNaN(shortformWordCount) || shortformWordCount < 10 || shortformWordCount > 120) {\n    console.log('⚠️ Invalid word count from form, using fallback 25');\n    shortformWordCount = 25; // Fallback for shortform\n  } else {\n    console.log('✅ Using user-selected word count:', shortformWordCount);\n  }\n} else {\n  console.log('⚠️ No word count target found in form, using fallback 25');\n  shortformWordCount = 25; // Fallback for shortform\n}\n\n// FIXED: Longform content target - 800 words with 1000 fallback\nconst longformWordCount = 800; // Primary target for blogs\nconst longformFallback = 1000; // Fallback if needed\n\nconsole.log('=== WORD COUNT CONFIGURATION (FIXED) ===');\nconsole.log('Raw Word Count Target from form:', rawWordCountTarget);\nconsole.log('Shortform Word Count (final):', shortformWordCount);\nconsole.log('Longform Word Count (primary):', longformWordCount);\nconsole.log('Longform Fallback:', longformFallback);\n\n// Validate word count is reasonable for shortform\nif (shortformWordCount < 10 || shortformWordCount > 40) {\n  console.log('⚠️ WARNING: Shortform word count outside recommended range (10-40 words)');\n}\n\n// Convert word counts to approximate character estimates for system compatibility\n// Average word length in English is approximately 5 characters + 1 space = 6 characters per word\nconst shortformCharEstimate = shortformWordCount * 6;\nconst longformCharEstimate = longformWordCount * 6; // 800 words ≈ 4800 characters\n\nconsole.log('=== CHARACTER ESTIMATES (for system compatibility) ===');\nconsole.log('Shortform Character Estimate:', shortformCharEstimate);\nconsole.log('Longform Character Estimate:', longformCharEstimate);\n\n// Create content item structure similar to Notion format with DUAL WORD COUNT SYSTEM\nconst processedContentItem = {\n  id: `form_${Date.now()}`,\n  name: `${socialContentType}: ${specificTopic}`,\n  \n  // Content details\n  property_content_brief: {\n    rich_text: [{ plain_text: contentBrief }]\n  },\n  property_social_content_type: {\n    select: { name: socialContentType }\n  },\n  property_specific_topic: {\n    rich_text: [{ plain_text: specificTopic }]\n  },\n  \n  // FIXED: Word count system with user selection and proper fallbacks\n  property_shortform_word_count: shortformWordCount,\n  property_longform_word_count: longformWordCount,\n  property_longform_fallback: longformFallback,\n  property_word_count_target: rawWordCountTarget, // Keep original for debugging\n  \n  // Character estimates for backward compatibility\n  property_shortform_char_estimate: shortformCharEstimate,\n  property_longform_char_estimate: longformCharEstimate,\n  \n  // Additional form fields\n  property_product_focus_url: {\n    rich_text: [{ plain_text: productFocusUrl }]\n  },\n  property_cta_url: {\n  rich_text: [{ plain_text: ctaUrl }]\n  },\n  property_seo_keywords: {\n    rich_text: [{ plain_text: seoKeywords }]\n  },\n  \n  // Business selection\n  selectedBusinessName: businessName,\n  \n  // UPDATED: Content strategy metadata with correct targets\n  contentStrategy: {\n    shortform: {\n      wordCount: shortformWordCount,\n      userSelected: !!rawWordCountTarget,\n      fallbackUsed: !rawWordCountTarget || isNaN(parseInt(rawWordCountTarget)),\n      purpose: 'Universal social media content',\n      platforms: ['Facebook', 'Instagram', 'Twitter', 'LinkedIn Posts', 'TikTok'],\n      characterEstimate: shortformCharEstimate\n    },\n    longform: {\n      wordCount: longformWordCount,\n      fallback: longformFallback,\n      purpose: 'Professional blog and educational content',\n      platforms: ['LinkedIn Articles', 'Blog Posts', 'Newsletters', 'Website Content'],\n      characterEstimate: longformCharEstimate\n    }\n  },\n  \n  // Form metadata\n  formProcessed: true,\n  processingTimestamp: new Date().toISOString(),\n  dualContentSystem: true,\n  wordCountSystemVersion: 'fixed_v2'\n};\n\nconsole.log('=== CONTENT STRATEGY SUMMARY (FIXED) ===');\nconsole.log('Shortform Strategy:', processedContentItem.contentStrategy.shortform);\nconsole.log('Longform Strategy:', processedContentItem.contentStrategy.longform);\n\nconsole.log('✅ Form data processed successfully with FIXED dual word count system');\nconsole.log('Business:', businessName);\nconsole.log('Content Type:', socialContentType);\nconsole.log('Topic:', specificTopic);\nconsole.log('Shortform Target:', `${shortformWordCount} words ${rawWordCountTarget ? '(user selected: ' + rawWordCountTarget + ')' : '(fallback: 25)'}`);\nconsole.log('Longform Target:', `${longformWordCount} words (optimized for blogs)`);\n\n// Validation and warnings\nconst validationWarnings = [];\n\nif (shortformWordCount < 10) {\n  validationWarnings.push('Shortform content below 10 words may be too brief for effective engagement');\n}\n\nif (shortformWordCount > 40) {\n  validationWarnings.push('Shortform content above 40 words may be too long for optimal social media engagement');\n}\n\nif (!contentBrief || contentBrief.length < 50) {\n  validationWarnings.push('Content brief is very short - consider adding more detail');\n}\n\nif (validationWarnings.length > 0) {\n  console.log('⚠️ VALIDATION WARNINGS:');\n  validationWarnings.forEach(warning => console.log(`  - ${warning}`));\n  processedContentItem.validationWarnings = validationWarnings;\n}\n\nconsole.log('=== PROCESSING COMPLETE (FIXED v2) ===');\nconsole.log('Final word counts - Shortform:', shortformWordCount, 'Longform:', longformWordCount);\n\nreturn {\n  json: processedContentItem\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1792,
        -240
      ],
      "id": "f0ab5088-b114-40b4-b118-601b82317d72",
      "name": "Process Form Data"
    },
    {
      "parameters": {
        "jsCode": "// ENHANCED Prepare Research Queries - WITH DUAL URL SYSTEM INTEGRATION\n// UNIVERSAL FOR ALL BUSINESS TYPES + PRODUCT FOCUS URL + CTA URL + SEO KEYWORDS\nconst dynamicData = $('Prepare Dynamic Data').item.json;\n\nconsole.log('=== PREPARING ENHANCED RESEARCH QUERIES - WITH DUAL URL SYSTEM ===');\n\n// Business configuration data\nconst businessName = dynamicData.businessName;\nconst businessCategory = dynamicData.businessCategory;\nconst specificTopic = dynamicData.specificTopic;\nconst socialContentType = dynamicData.socialContentType;\n\n// Enhanced business context\nconst businessNotes = dynamicData.businessNotes || '';\nconst customGlobalRules = dynamicData.customGlobalRules || '';\nconst seoStrategy = dynamicData.seoStrategy || '';\n\n// NEW: Form data integration\nconst formData = dynamicData.formData || {};\nconst formSeoKeywords = dynamicData.seoKeywords || formData.seoKeywords || '';\nconst hasSeoKeywords = dynamicData.hasSeoKeywords || false;\n\n// NEW: DUAL URL SYSTEM - Extract both URLs separately\nconst productFocusUrl = dynamicData.productFocusUrl || '';\nconst hasProductFocusUrl = dynamicData.hasProductFocusUrl || false;\nconst ctaUrl = dynamicData.ctaUrl || '';\nconst hasCtaUrl = dynamicData.hasCtaUrl || false;\n\n// Website integration data\nconst hasWebsites = dynamicData.hasWebsites || false;\nconst websiteUrls = dynamicData.websiteUrls || [];\nconst websiteCount = dynamicData.websiteCount || 0;\nconst primaryWebsite = dynamicData.primaryWebsite || '';\n\n// Success story integration\nconst isSuccessStory = dynamicData.isSuccessStory || false;\nconst hasReviewPlatforms = dynamicData.hasReviewPlatforms || false;\nconst hasFacebookReviews = dynamicData.hasFacebookReviews || false;\nconst hasGoogleReviews = dynamicData.hasGoogleReviews || false;\n\nconsole.log('=== DUAL URL SYSTEM INTEGRATION STATUS ===');\nconsole.log('Product Focus URL (for research):', productFocusUrl || 'None provided');\nconsole.log('Has Product Focus URL:', hasProductFocusUrl);\nconsole.log('CTA URL (for conversion):', ctaUrl || 'None provided');\nconsole.log('Has CTA URL:', hasCtaUrl);\nconsole.log('Dual URL System Status:', hasProductFocusUrl || hasCtaUrl ? 'Active' : 'Inactive');\n\nconsole.log('=== FORM DATA INTEGRATION STATUS ===');\nconsole.log('Form SEO Keywords:', formSeoKeywords || 'None provided');\nconsole.log('Has SEO Keywords:', hasSeoKeywords);\n\nconsole.log('=== EXISTING INTEGRATION STATUS ===');\nconsole.log('Has Websites:', hasWebsites);\nconsole.log('Website Count:', websiteCount);\nconsole.log('Primary Website:', primaryWebsite);\nconsole.log('Is Success Story:', isSuccessStory);\nconsole.log('Has Review Platforms:', hasReviewPlatforms);\n\n// Create enhanced research queries with dual URL system integration\nconst researchQueries = [];\n\n// 1. PRIORITY: Form SEO Keywords Research (NEW)\nif (hasSeoKeywords && formSeoKeywords.trim() !== '') {\n  console.log('✅ Adding form SEO keywords research - HIGHEST PRIORITY');\n  \n  const keywords = formSeoKeywords.split(',').map(k => k.trim()).filter(k => k.length > 2);\n  \n  keywords.forEach((keyword, index) => {\n    if (index < 3) { // Limit to top 3 keywords\n      // Keyword + topic research\n      researchQueries.push(`${keyword} ${specificTopic} ${businessCategory} 2025`);\n      \n      // Keyword + benefits research\n      researchQueries.push(`${keyword} benefits professional ${businessCategory} best practices`);\n      \n      // Keyword + local research (if applicable)\n      if (businessNotes.toLowerCase().includes('local') || businessNotes.toLowerCase().includes('scotland')) {\n        researchQueries.push(`${keyword} ${businessCategory} Scotland local area services`);\n      }\n    }\n  });\n  \n  // Combined keywords research\n  if (keywords.length > 1) {\n    const topKeywords = keywords.slice(0, 2).join(' ');\n    researchQueries.push(`${topKeywords} ${specificTopic} professional guidance ${businessCategory}`);\n  }\n}\n\n// 2. ENHANCED PRODUCT FOCUS URL RESEARCH (research-specific URL only)\nif (hasProductFocusUrl && productFocusUrl) {\n  console.log('✅ Adding enhanced product focus URL research (research purpose only)');\n  \n  try {\n    const url = new URL(productFocusUrl.startsWith('http') ? productFocusUrl : 'https://' + productFocusUrl);\n    const domain = url.hostname.replace('www.', '');\n    \n    // Research the specific URL for content alignment\n    researchQueries.push(`site:${domain} \"${url.pathname}\" content information details`);\n    researchQueries.push(`\"${productFocusUrl}\" features benefits specifications details`);\n    \n    // Enhanced product focus research based on content type\n    switch (socialContentType) {\n      case 'Educational':\n        researchQueries.push(`${specificTopic} educational content ${domain} learning resources methodology`);\n        researchQueries.push(`${specificTopic} best practices guide ${businessCategory} education approach`);\n        break;\n        \n      case 'Product Highlight':\n        researchQueries.push(`${specificTopic} product analysis features benefits ${domain} specifications`);\n        researchQueries.push(`${domain} ${specificTopic} product user experience customer feedback`);\n        break;\n        \n      case 'Problem & Solution':\n        researchQueries.push(`${specificTopic} solution approach ${domain} problem solving methodology`);\n        researchQueries.push(`${specificTopic} challenges solutions ${businessCategory} ${domain} approach`);\n        break;\n        \n      case 'Process Showcase':\n        researchQueries.push(`${specificTopic} process methodology ${domain} step by step workflow`);\n        researchQueries.push(`${specificTopic} professional process ${businessCategory} ${domain} standards`);\n        break;\n        \n      case 'Success Story':\n        researchQueries.push(`${specificTopic} case study success ${domain} results metrics testimonials`);\n        researchQueries.push(`${specificTopic} success stories ${businessCategory} ${domain} outcomes`);\n        break;\n        \n      case 'Community & Stories':\n        researchQueries.push(`${specificTopic} community stories ${domain} customer experiences testimonials`);\n        researchQueries.push(`${specificTopic} ${businessCategory} community ${domain} local connection`);\n        break;\n        \n      default:\n        researchQueries.push(`${specificTopic} ${domain} information context background details`);\n        researchQueries.push(`${specificTopic} content research ${businessCategory} ${domain} insights`);\n    }\n    \n    // SEO keywords + Product Focus URL combination\n    if (hasSeoKeywords && formSeoKeywords) {\n      const topKeyword = formSeoKeywords.split(',')[0].trim();\n      researchQueries.push(`${topKeyword} ${domain} ${specificTopic} comprehensive guide analysis`);\n      researchQueries.push(`${topKeyword} ${specificTopic} ${domain} expert insights professional approach`);\n    }\n    \n  } catch (error) {\n    console.log(`⚠️ Invalid product focus URL format: ${productFocusUrl}`);\n    // Fallback to general product research\n    researchQueries.push(`${specificTopic} product information features benefits details analysis`);\n    researchQueries.push(`${specificTopic} ${businessCategory} product research professional insights`);\n  }\n}\n\n// 3. CTA URL ANALYSIS (conversion-focused research - NEW)\nif (hasCtaUrl && ctaUrl) {\n  console.log('✅ Adding CTA URL analysis for conversion optimization');\n  \n  try {\n    const ctaUrlObj = new URL(ctaUrl.startsWith('http') ? ctaUrl : 'https://' + ctaUrl);\n    const ctaDomain = ctaUrlObj.hostname.replace('www.', '');\n    \n    // Research CTA destination for conversion context\n    researchQueries.push(`site:${ctaDomain} \"${ctaUrlObj.pathname}\" conversion landing page`);\n    \n    // Analyze what action the CTA URL represents\n    const ctaPath = ctaUrlObj.pathname.toLowerCase();\n    if (ctaPath.includes('book') || ctaPath.includes('appointment') || ctaPath.includes('schedule')) {\n      researchQueries.push(`${specificTopic} booking process ${businessCategory} appointment scheduling`);\n    } else if (ctaPath.includes('quote') || ctaPath.includes('estimate')) {\n      researchQueries.push(`${specificTopic} quote process ${businessCategory} pricing estimation`);\n    } else if (ctaPath.includes('contact') || ctaPath.includes('get-in-touch')) {\n      researchQueries.push(`${specificTopic} contact process ${businessCategory} customer inquiry`);\n    } else if (ctaPath.includes('shop') || ctaPath.includes('buy') || ctaPath.includes('purchase')) {\n      researchQueries.push(`${specificTopic} purchase process ${businessCategory} buying decision`);\n    } else if (ctaPath.includes('learn') || ctaPath.includes('guide') || ctaPath.includes('resources')) {\n      researchQueries.push(`${specificTopic} learning resources ${businessCategory} educational content`);\n    } else {\n      researchQueries.push(`${specificTopic} ${businessCategory} customer action next steps`);\n    }\n    \n    // CTA URL + SEO keywords for conversion optimization\n    if (hasSeoKeywords && formSeoKeywords) {\n      const topKeyword = formSeoKeywords.split(',')[0].trim();\n      researchQueries.push(`${topKeyword} ${specificTopic} customer action conversion ${businessCategory}`);\n    }\n    \n  } catch (error) {\n    console.log(`⚠️ Invalid CTA URL format: ${ctaUrl}`);\n    // Fallback to general conversion research\n    researchQueries.push(`${specificTopic} customer action ${businessCategory} conversion optimization`);\n  }\n}\n\n// 4. WEBSITE-SPECIFIC RESEARCH (if available)\nif (hasWebsites && primaryWebsite) {\n  console.log('✅ Adding website-specific research queries');\n  \n  // Extract domain for site-specific searches\n  let domain = '';\n  try {\n    const url = new URL(primaryWebsite);\n    domain = url.hostname.replace('www.', '');\n  } catch (e) {\n    domain = primaryWebsite.replace(/https?:\\/\\/(www\\.)?/, '').split('/')[0];\n  }\n  \n  // Site-specific service research - UNIVERSAL TERMS\n  researchQueries.push(`site:${domain} services experience professional ${businessCategory}`);\n  researchQueries.push(`site:${domain} qualifications expertise ${specificTopic}`);\n  \n  // If multiple websites, research each for different aspects\n  if (websiteCount > 1) {\n    websiteUrls.forEach((url, index) => {\n      if (index < 2 && url !== primaryWebsite) { // Limit to 2 additional sites\n        try {\n          const additionalDomain = new URL(url).hostname.replace('www.', '');\n          researchQueries.push(`site:${additionalDomain} ${specificTopic} ${businessCategory} services`);\n        } catch (e) {\n          console.log(`⚠️ Invalid website URL format: ${url}`);\n        }\n      }\n    });\n  }\n  \n  // Combine website research with SEO keywords\n  if (hasSeoKeywords && formSeoKeywords) {\n    const topKeyword = formSeoKeywords.split(',')[0].trim();\n    researchQueries.push(`site:${domain} ${topKeyword} ${specificTopic} professional services`);\n  }\n}\n\n// 5. SUCCESS STORY & REVIEW RESEARCH\nif (hasReviewPlatforms || businessName) {\n  console.log('✅ Adding success story and review research');\n  \n// Search for reviews regardless of content type\n  researchQueries.push(`\"${businessName}\" customer reviews testimonials feedback`);\n  researchQueries.push(`\"${businessName}\" google reviews customer experiences`);\n  researchQueries.push(`\"${businessName}\" facebook reviews customer satisfaction`);\n  \n  // Topic-specific review research\n  researchQueries.push(`\"${businessName}\" ${specificTopic} customer success reviews`);\n  \n  // Success stories + SEO keywords\n  if (hasSeoKeywords && formSeoKeywords) {\n    const topKeyword = formSeoKeywords.split(',')[0].trim();\n    researchQueries.push(`${topKeyword} success stories ${businessCategory} customer results`);\n  }\n}\n\n// 6. BUSINESS SERVICE CONTEXT (from Notes field) - UNIVERSAL KEYWORDS\nif (businessNotes && businessNotes.length > 50) {\n  console.log('✅ Adding business service context research');\n  \n  const notesLower = businessNotes.toLowerCase();\n  \n  // Extract UNIVERSAL service keywords and create targeted research\n  if (notesLower.includes('professional') || notesLower.includes('qualified') || notesLower.includes('certified')) {\n    researchQueries.push(`${specificTopic} professional ${businessCategory} qualifications certifications`);\n  }\n  \n  if (notesLower.includes('mobile') || notesLower.includes('convenience') || notesLower.includes('home')) {\n    researchQueries.push(`${specificTopic} mobile ${businessCategory} convenience home service benefits`);\n  }\n  \n  if (notesLower.includes('quality') || notesLower.includes('premium') || notesLower.includes('excellent')) {\n    researchQueries.push(`${specificTopic} quality ${businessCategory} premium service standards excellence`);\n  }\n  \n  if (notesLower.includes('local') || notesLower.includes('angus') || notesLower.includes('scotland') || notesLower.includes('scottish')) {\n    researchQueries.push(`${specificTopic} local ${businessCategory} Scotland Angus area community`);\n  }\n  \n  if (notesLower.includes('experience') || notesLower.includes('years') || notesLower.includes('established')) {\n    researchQueries.push(`${specificTopic} experienced ${businessCategory} established business reputation`);\n  }\n  \n  if (notesLower.includes('customer') || notesLower.includes('reviews') || notesLower.includes('5-star')) {\n    researchQueries.push(`${specificTopic} customer satisfaction ${businessCategory} reviews ratings`);\n  }\n  \n  // Business context + SEO keywords combination\n  if (hasSeoKeywords && formSeoKeywords) {\n    const topKeyword = formSeoKeywords.split(',')[0].trim();\n    if (notesLower.includes('local')) {\n      researchQueries.push(`${topKeyword} local ${businessCategory} Scotland area services`);\n    }\n    if (notesLower.includes('professional')) {\n      researchQueries.push(`${topKeyword} professional ${businessCategory} certified qualified`);\n    }\n  }\n}\n\n// 7. CONTENT RULES ALIGNMENT (from Global Content Rules) - UNIVERSAL TERMS\nif (customGlobalRules && customGlobalRules.length > 50) {\n  console.log('✅ Adding content rules alignment research');\n  \n  const rulesLower = customGlobalRules.toLowerCase();\n  \n  if (rulesLower.includes('affordable') || rulesLower.includes('competitive') || rulesLower.includes('value')) {\n    researchQueries.push(`${specificTopic} affordable ${businessCategory} competitive pricing value money`);\n  }\n  \n  if (rulesLower.includes('convenience') || rulesLower.includes('time-saving') || rulesLower.includes('flexible')) {\n    researchQueries.push(`${specificTopic} convenient ${businessCategory} time-saving flexible scheduling`);\n  }\n  \n  if (rulesLower.includes('quality') || rulesLower.includes('professional') || rulesLower.includes('standards')) {\n    researchQueries.push(`${specificTopic} quality ${businessCategory} professional standards excellence`);\n  }\n}\n\n// 8. ENHANCED SEO STRATEGY KEYWORDS (Business Database)\nif (seoStrategy && seoStrategy.length > 20) {\n  console.log('✅ Adding business database SEO strategy keyword research');\n  \n  const businessSeoKeywords = seoStrategy.split(',').map(k => k.trim()).slice(0, 3);\n  businessSeoKeywords.forEach(keyword => {\n    if (keyword.length > 5) {\n      researchQueries.push(`${keyword} benefits professional ${businessCategory} expertise 2025`);\n      researchQueries.push(`${keyword} ${specificTopic} ${businessCategory} best practices guide`);\n    }\n  });\n  \n  // Combine business SEO with form SEO keywords\n  if (hasSeoKeywords && formSeoKeywords) {\n    const formKeyword = formSeoKeywords.split(',')[0].trim();\n    const businessKeyword = businessSeoKeywords[0];\n    if (formKeyword !== businessKeyword) {\n      researchQueries.push(`${formKeyword} ${businessKeyword} ${specificTopic} comprehensive approach`);\n    }\n  }\n}\n\n// 9. CONTENT-TYPE SPECIFIC RESEARCH - UNIVERSAL (Enhanced with form data)\nif (socialContentType === 'Educational') {\n  researchQueries.push(`${specificTopic} ${businessCategory} education fundamentals techniques best practices`);\n  if (hasSeoKeywords) {\n    const topKeyword = formSeoKeywords.split(',')[0]?.trim();\n    if (topKeyword) {\n      researchQueries.push(`${topKeyword} educational guide ${specificTopic} ${businessCategory} learning`);\n    }\n  }\n} else if (socialContentType === 'Problem & Solution') {\n  researchQueries.push(`${specificTopic} common problems ${businessCategory} solutions professional advice`);\n  if (hasSeoKeywords) {\n    const topKeyword = formSeoKeywords.split(',')[0]?.trim();\n    if (topKeyword) {\n      researchQueries.push(`${topKeyword} problem solution ${specificTopic} ${businessCategory} resolve`);\n    }\n  }\n} else if (socialContentType === 'Process Showcase') {\n  researchQueries.push(`${specificTopic} ${businessCategory} process methodology step by step workflow`);\n  if (hasSeoKeywords) {\n    const topKeyword = formSeoKeywords.split(',')[0]?.trim();\n    if (topKeyword) {\n      researchQueries.push(`${topKeyword} process ${specificTopic} ${businessCategory} methodology approach`);\n    }\n  }\n} else if (socialContentType === 'Product Highlight') {\n  if (!hasProductFocusUrl) { // Only add if we don't have specific product research\n    researchQueries.push(`${specificTopic} features benefits ${businessCategory} services products`);\n    if (hasSeoKeywords) {\n      const topKeyword = formSeoKeywords.split(',')[0]?.trim();\n      if (topKeyword) {\n        researchQueries.push(`${topKeyword} product ${specificTopic} ${businessCategory} features benefits`);\n      }\n    }\n  }\n} else if (socialContentType === 'Community & Stories') {\n  if (!isSuccessStory) { // Only add if we don't have specific success story research\n    researchQueries.push(`${specificTopic} community ${businessCategory} stories local business connection`);\n    if (hasSeoKeywords) {\n      const topKeyword = formSeoKeywords.split(',')[0]?.trim();\n      if (topKeyword) {\n        researchQueries.push(`${topKeyword} community ${specificTopic} ${businessCategory} local stories`);\n      }\n    }\n  }\n}\n\n// 10. CONTRARIAN/INSIGHT RESEARCH (Seth Godin style) - UNIVERSAL + SEO\nresearchQueries.push(`${specificTopic} what most ${businessCategory} businesses get wrong common mistakes`);\nresearchQueries.push(`${specificTopic} conventional wisdom challenged alternative approach ${businessCategory}`);\n\n// Add contrarian research with SEO keywords\nif (hasSeoKeywords && formSeoKeywords) {\n  const topKeyword = formSeoKeywords.split(',')[0].trim();\n  researchQueries.push(`${topKeyword} myths debunked ${specificTopic} ${businessCategory} truth reality`);\n}\n\n// 11. INDUSTRY TRENDS (only if we don't have enough specific research) - UNIVERSAL\nif (researchQueries.length < 8) {\n  researchQueries.push(`${businessCategory} trends 2025 latest developments industry insights`);\n  researchQueries.push(`${specificTopic} best practices professional standards ${businessCategory} 2025`);\n  \n  if (hasSeoKeywords) {\n    const topKeyword = formSeoKeywords.split(',')[0]?.trim();\n    if (topKeyword) {\n      researchQueries.push(`${topKeyword} trends 2025 ${businessCategory} industry future`);\n    }\n  }\n}\n\n// Remove duplicates and limit to optimal number for Tavily\nconst uniqueQueries = [...new Set(researchQueries)].slice(0, 8);\n\nconsole.log('=== FINAL ENHANCED RESEARCH QUERIES (WITH DUAL URL SYSTEM) ===');\nconsole.log(`Generated ${uniqueQueries.length} unique research queries:`);\nuniqueQueries.forEach((query, index) => {\n  console.log(`${index + 1}. ${query}`);\n});\n\nconsole.log('\\n=== DUAL URL SYSTEM RESEARCH STRATEGY SUMMARY ===');\nconsole.log('Business Category:', businessCategory);\nconsole.log('Form SEO Keywords:', hasSeoKeywords ? `\"${formSeoKeywords}\"` : 'Not provided');\nconsole.log('Product Focus URL Integration:', hasProductFocusUrl ? `Research source - ${productFocusUrl}` : 'No research URL');\nconsole.log('CTA URL Integration:', hasCtaUrl ? `Conversion destination - ${ctaUrl}` : 'Business template CTA');\nconsole.log('Website Integration:', hasWebsites ? `${websiteCount} websites researched` : 'No websites available');\nconsole.log('Success Story Research:', isSuccessStory && hasReviewPlatforms ? 'Review platforms researched' : 'No review research');\nconsole.log('Service Context:', businessNotes.length > 50 ? 'Business services researched' : 'Limited service context');\nconsole.log('Content Rules:', customGlobalRules.length > 50 ? 'Content rules applied' : 'Default approach');\nconsole.log('Business SEO Focus:', seoStrategy.length > 20 ? 'Business SEO keywords researched' : 'No business SEO strategy');\n\n// Research priority assessment with dual URL system\nlet researchPriority = 'standard';\nif (hasSeoKeywords && hasProductFocusUrl && hasCtaUrl) {\n  researchPriority = 'premium_dual_url_with_seo';\n} else if (hasSeoKeywords && (hasProductFocusUrl || hasCtaUrl)) {\n  researchPriority = 'enhanced_with_form_data_and_url';\n} else if (hasProductFocusUrl && hasCtaUrl) {\n  researchPriority = 'enhanced_dual_url_system';\n} else if (hasSeoKeywords || hasProductFocusUrl || hasCtaUrl) {\n  researchPriority = 'enhanced_partial';\n} else if (hasWebsites || (isSuccessStory && hasReviewPlatforms)) {\n  researchPriority = 'enhanced_business_data';\n}\n\nconsole.log('Research Priority Level:', researchPriority);\n\nreturn {\n  json: {\n    researchQueries: uniqueQueries,\n    primaryTopic: specificTopic,\n    \n    // Enhanced dual URL system integration\n    dualUrlIntegration: {\n      productFocusUrl: productFocusUrl,\n      hasProductFocusUrl: hasProductFocusUrl,\n      ctaUrl: ctaUrl,\n      hasCtaUrl: hasCtaUrl,\n      productFocusUrlQueries: researchQueries.filter(q => \n        hasProductFocusUrl && (q.includes('site:') || q.includes(productFocusUrl))\n      ).length,\n      ctaUrlQueries: researchQueries.filter(q => \n        hasCtaUrl && (q.includes('conversion') || q.includes('booking') || q.includes('quote') || q.includes('contact'))\n      ).length,\n      researchPurpose: hasProductFocusUrl ? 'Content research and alignment' : 'General topic research',\n      conversionPurpose: hasCtaUrl ? 'Dedicated CTA destination' : 'Business template fallback'\n    },\n    \n    // Enhanced form data integration\n    formDataIntegration: {\n      seoKeywords: formSeoKeywords,\n      hasSeoKeywords: hasSeoKeywords,\n      productFocusUrl: productFocusUrl,\n      hasProductFocusUrl: hasProductFocusUrl,\n      ctaUrl: ctaUrl,\n      hasCtaUrl: hasCtaUrl,\n      seoKeywordQueries: researchQueries.filter(q => \n        formSeoKeywords && formSeoKeywords.split(',').some(keyword => \n          q.toLowerCase().includes(keyword.trim().toLowerCase())\n        )\n      ).length,\n      productFocusUrlQueries: researchQueries.filter(q => \n        hasProductFocusUrl && (q.includes('site:') || q.includes(productFocusUrl))\n      ).length,\n      ctaUrlQueries: researchQueries.filter(q => \n        hasCtaUrl && (q.includes('conversion') || q.includes('customer action'))\n      ).length\n    },\n    \n    businessContext: {\n      name: businessName,\n      category: businessCategory,\n      services: businessNotes,\n      rules: customGlobalRules,\n      seoFocus: seoStrategy,\n      hasServiceDetail: businessNotes.length > 50,\n      hasContentRules: customGlobalRules.length > 50,\n      hasSeoStrategy: seoStrategy.length > 20\n    },\n    \n    websiteIntegration: {\n      hasWebsites: hasWebsites,\n      websiteCount: websiteCount,\n      primaryWebsite: primaryWebsite,\n      websiteUrls: websiteUrls,\n      websiteResearchQueries: researchQueries.filter(q => q.includes('site:')).length\n    },\n    \n    successStoryIntegration: {\n      isSuccessStory: isSuccessStory,\n      hasReviewPlatforms: hasReviewPlatforms,\n      facebookReviews: hasFacebookReviews,\n      googleReviews: hasGoogleReviews,\n      reviewResearchActive: isSuccessStory && hasReviewPlatforms\n    },\n    \n    contentContext: {\n      type: socialContentType,\n      topic: specificTopic\n    },\n    \n    researchStrategy: researchPriority,\n    researchPriorityLevel: researchPriority,\n    qualityLevel: 'comprehensive_research_integration_with_dual_url_system',\n    \n    // Enhanced tracking with dual URL system\n    researchQueryBreakdown: {\n      total: uniqueQueries.length,\n      seoKeywordBased: researchQueries.filter(q => \n        formSeoKeywords && formSeoKeywords.split(',').some(keyword => \n          q.toLowerCase().includes(keyword.trim().toLowerCase())\n        )\n      ).length,\n      productFocusUrlBased: researchQueries.filter(q => \n        hasProductFocusUrl && (q.includes('site:') || q.includes(productFocusUrl))\n      ).length,\n      ctaUrlBased: researchQueries.filter(q => \n        hasCtaUrl && (q.includes('conversion') || q.includes('booking') || q.includes('quote'))\n      ).length,\n      websiteBased: researchQueries.filter(q => q.includes('site:')).length,\n      businessContextBased: researchQueries.filter(q => \n        q.includes(businessName) || q.includes(businessCategory)\n      ).length,\n      contentTypeBased: researchQueries.filter(q => \n        q.includes(socialContentType.toLowerCase()) || q.includes(specificTopic)\n      ).length\n    },\n    \n    // Dual URL system status\n    dualUrlSystemStatus: {\n      active: hasProductFocusUrl || hasCtaUrl,\n      researchUrlActive: hasProductFocusUrl,\n      conversionUrlActive: hasCtaUrl,\n      bothUrlsActive: hasProductFocusUrl && hasCtaUrl,\n      systemLevel: hasProductFocusUrl && hasCtaUrl ? 'complete' : \n                   hasProductFocusUrl || hasCtaUrl ? 'partial' : 'business_templates_only',\n      researchEnhancement: hasProductFocusUrl ? 'url_specific_research' : 'general_topic_research',\n      conversionEnhancement: hasCtaUrl ? 'dedicated_cta_destination' : 'business_template_cta'\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3232,
        -240
      ],
      "id": "8b81d02f-8129-42f1-8073-281716be45a9",
      "name": "Prepare Research Queries"
    },
    {
      "parameters": {
        "jsCode": "// Process Tavily Research Results - ENHANCED WITH FORM DATA INTEGRATION\nconst researchData = $json;\nconst queryData = $('Prepare Research Queries').item.json;\nconst dynamicData = $('Prepare Dynamic Data').item.json;\n\nconsole.log('=== PROCESSING ENHANCED RESEARCH RESULTS WITH FORM DATA ===');\n\n// Extract form data integration\nconst formData = dynamicData.formData || {};\nconst formSeoKeywords = dynamicData.seoKeywords || '';\nconst hasSeoKeywords = dynamicData.hasSeoKeywords || false;\nconst productFocusUrl = dynamicData.productFocusUrl || '';\nconst hasProductUrl = dynamicData.hasProductUrl || false;\nconst productUrlPurpose = dynamicData.productUrlPurpose || '';\n\nconsole.log('--- FORM DATA INTEGRATION STATUS ---');\nconsole.log('Form SEO Keywords:', formSeoKeywords || 'None provided');\nconsole.log('Has SEO Keywords:', hasSeoKeywords);\nconsole.log('Product URL:', productFocusUrl || 'None provided');\nconsole.log('Has Product URL:', hasProductUrl);\nconsole.log('Product URL Purpose:', productUrlPurpose);\n\n// Extract business context\nconst businessName = dynamicData.businessName || '';\nconst businessCategory = dynamicData.businessCategory || '';\nconst specificTopic = dynamicData.specificTopic || '';\nconst socialContentType = dynamicData.socialContentType || '';\n\nlet researchInsights = '';\nlet sources = [];\nlet keywordInsights = '';\nlet productUrlInsights = '';\nlet businessInsights = '';\n\n// 1. PROCESS CORE RESEARCH RESULTS\nif (researchData.results && researchData.results.length > 0) {\n  console.log(`Found ${researchData.results.length} research results`);\n  \n  // Extract key insights from research results\n  researchData.results.forEach((result, index) => {\n    if (result.content) {\n      const content = result.content.substring(0, 400);\n      researchInsights += `\\n\\nRESEARCH INSIGHT ${index + 1}:\\n${content}...\\n`;\n      \n      if (result.url) {\n        sources.push(result.url);\n      }\n      \n      // Analyze content for form data relevance\n      if (hasSeoKeywords && formSeoKeywords) {\n        const keywords = formSeoKeywords.split(',').map(k => k.trim().toLowerCase());\n        keywords.forEach(keyword => {\n          if (content.toLowerCase().includes(keyword)) {\n            keywordInsights += `\\n- Found \"${keyword}\" insight: ${content.substring(0, 150)}...\\n`;\n          }\n        });\n      }\n      \n      // Analyze content for product URL relevance\n      if (hasProductUrl && productFocusUrl) {\n        try {\n          const urlDomain = new URL(productFocusUrl.startsWith('http') ? productFocusUrl : 'https://' + productFocusUrl).hostname;\n          if (result.url && result.url.includes(urlDomain)) {\n            productUrlInsights += `\\n- Product URL insight: ${content.substring(0, 200)}...\\n`;\n          }\n        } catch (e) {\n          // Handle URL parsing errors silently\n        }\n      }\n    }\n  });\n  \n  // Add the research summary if available\n  if (researchData.answer) {\n    researchInsights = `RESEARCH SUMMARY:\\n${researchData.answer}\\n\\n${researchInsights}`;\n  }\n} else {\n  console.log('No research results found');\n  researchInsights = 'No specific research data available - use general industry knowledge.';\n}\n\n// 2. ENHANCED FORM DATA INTEGRATION\nlet enhancedResearchInsights = researchInsights;\n\n// Add SEO keyword context\nif (hasSeoKeywords && formSeoKeywords.trim() !== '') {\n  const keywords = formSeoKeywords.split(',').map(k => k.trim()).slice(0, 3);\n  \n  enhancedResearchInsights += `\\n\\n🎯 SEO KEYWORDS INTEGRATION:\\n`;\n  enhancedResearchInsights += `PRIMARY KEYWORDS: ${keywords.join(', ')}\\n`;\n  enhancedResearchInsights += `KEYWORD FOCUS: Naturally incorporate these keywords into content about ${specificTopic}\\n`;\n  enhancedResearchInsights += `INTEGRATION APPROACH: Use keywords naturally within ${socialContentType} content format\\n`;\n  \n  if (keywordInsights) {\n    enhancedResearchInsights += `\\nKEYWORD-SPECIFIC RESEARCH INSIGHTS:${keywordInsights}`;\n  } else {\n    enhancedResearchInsights += `\\nNOTE: Limited specific research found for keywords - use general knowledge to integrate naturally\\n`;\n  }\n  \n  // Add keyword-specific guidance based on content type\n  switch (socialContentType) {\n    case 'Educational':\n      enhancedResearchInsights += `\\nKEYWORD STRATEGY: Use keywords in educational explanations about ${specificTopic}\\n`;\n      break;\n    case 'Product Highlight':\n      enhancedResearchInsights += `\\nKEYWORD STRATEGY: Integrate keywords when describing product features and benefits\\n`;\n      break;\n    case 'Problem & Solution':\n      enhancedResearchInsights += `\\nKEYWORD STRATEGY: Use keywords when explaining problems and presenting solutions\\n`;\n      break;\n    case 'Process Showcase':\n      enhancedResearchInsights += `\\nKEYWORD STRATEGY: Incorporate keywords when describing processes and methodologies\\n`;\n      break;\n    default:\n      enhancedResearchInsights += `\\nKEYWORD STRATEGY: Use keywords naturally within ${socialContentType} context\\n`;\n  }\n}\n\n// Add Product URL context\nif (hasProductUrl && productFocusUrl) {\n  enhancedResearchInsights += `\\n\\n🔗 PRODUCT/CONTENT URL INTEGRATION:\\n`;\n  enhancedResearchInsights += `REFERENCE URL: ${productFocusUrl}\\n`;\n  enhancedResearchInsights += `URL PURPOSE: ${productUrlPurpose}\\n`;\n  \n  // Add purpose-specific research guidance\n  switch (productUrlPurpose) {\n    case 'product_feature_analysis':\n      enhancedResearchInsights += `URL GUIDANCE: Research and reference product features, specifications, and benefits from this URL\\n`;\n      enhancedResearchInsights += `CONTENT ALIGNMENT: Ensure content accurately reflects product information from the URL\\n`;\n      break;\n    case 'educational_content_reference':\n      enhancedResearchInsights += `URL GUIDANCE: Use this URL as an authoritative educational reference source\\n`;\n      enhancedResearchInsights += `CONTENT ALIGNMENT: Align educational content with information and insights from the URL\\n`;\n      break;\n    case 'solution_alignment':\n      enhancedResearchInsights += `URL GUIDANCE: Research solutions and approaches presented in this URL\\n`;\n      enhancedResearchInsights += `CONTENT ALIGNMENT: Align problem-solution content with URL methodology\\n`;\n      break;\n    case 'process_documentation':\n      enhancedResearchInsights += `URL GUIDANCE: Extract process information and methodologies from this URL\\n`;\n      enhancedResearchInsights += `CONTENT ALIGNMENT: Reference URL processes in content creation\\n`;\n      break;\n    case 'success_case_study':\n      enhancedResearchInsights += `URL GUIDANCE: Research success metrics and case study data from this URL\\n`;\n      enhancedResearchInsights += `CONTENT ALIGNMENT: Use URL success stories and testimonials for content\\n`;\n      break;\n    default:\n      enhancedResearchInsights += `URL GUIDANCE: Research and align content with general information from this URL\\n`;\n      enhancedResearchInsights += `CONTENT ALIGNMENT: Ensure content accuracy and relevance to URL context\\n`;\n  }\n  \n  if (productUrlInsights) {\n    enhancedResearchInsights += `\\nPRODUCT URL RESEARCH INSIGHTS:${productUrlInsights}`;\n  } else {\n    enhancedResearchInsights += `\\nNOTE: Research this URL directly for specific product/content information\\n`;\n  }\n}\n\n// 3. BUSINESS CONTEXT ENHANCEMENT\nif (businessName && businessCategory) {\n  enhancedResearchInsights += `\\n\\n🏢 BUSINESS CONTEXT INTEGRATION:\\n`;\n  enhancedResearchInsights += `BUSINESS: ${businessName}\\n`;\n  enhancedResearchInsights += `CATEGORY: ${businessCategory}\\n`;\n  enhancedResearchInsights += `TOPIC FOCUS: ${specificTopic}\\n`;\n  enhancedResearchInsights += `CONTENT TYPE: ${socialContentType}\\n`;\n  \n  // Add business-specific research context\n  if (dynamicData.businessNotes && dynamicData.businessNotes.length > 50) {\n    enhancedResearchInsights += `BUSINESS SERVICES: Reference business-specific services and unique selling points\\n`;\n  }\n  \n  if (dynamicData.customGlobalRules && dynamicData.customGlobalRules.length > 50) {\n    enhancedResearchInsights += `CONTENT RULES: Apply business-specific content guidelines\\n`;\n  }\n}\n\n// 4. RESEARCH QUALITY ASSESSMENT\nconst researchQuality = {\n  totalResults: researchData.results?.length || 0,\n  hasResearchSummary: !!researchData.answer,\n  keywordRelevance: keywordInsights.length > 0,\n  productUrlRelevance: productUrlInsights.length > 0,\n  sourcesFound: sources.length,\n  overallQuality: 'standard'\n};\n\n// Determine research quality level\nif (researchQuality.totalResults >= 3 && researchQuality.hasResearchSummary) {\n  if (researchQuality.keywordRelevance && researchQuality.productUrlRelevance) {\n    researchQuality.overallQuality = 'excellent_with_form_integration';\n  } else if (researchQuality.keywordRelevance || researchQuality.productUrlRelevance) {\n    researchQuality.overallQuality = 'good_with_partial_integration';\n  } else {\n    researchQuality.overallQuality = 'good_standard_research';\n  }\n} else if (researchQuality.totalResults > 0) {\n  researchQuality.overallQuality = 'limited_research_available';\n} else {\n  researchQuality.overallQuality = 'no_research_data';\n}\n\n// 5. CREATE COMPREHENSIVE RESEARCH CONTEXT\nconst researchContext = {\n  primaryQuery: queryData.researchQueries?.[0] || 'No query data available',\n  totalQueries: queryData.researchQueries?.length || 0,\n  businessContext: queryData.businessContext || {},\n  formDataIntegration: {\n    seoKeywords: formSeoKeywords,\n    hasSeoKeywords: hasSeoKeywords,\n    productUrl: productFocusUrl,\n    hasProductUrl: hasProductUrl,\n    productUrlPurpose: productUrlPurpose\n  },\n  researchStrategy: queryData.researchStrategy || 'standard',\n  qualityAssessment: researchQuality\n};\n\nconsole.log('=== ENHANCED RESEARCH PROCESSING SUMMARY ===');\nconsole.log('Research insights compiled:', enhancedResearchInsights.length, 'characters');\nconsole.log('Sources found:', sources.length);\nconsole.log('SEO keyword insights:', keywordInsights.length > 0 ? 'Found' : 'Limited');\nconsole.log('Product URL insights:', productUrlInsights.length > 0 ? 'Found' : 'Limited');\nconsole.log('Research quality:', researchQuality.overallQuality);\nconsole.log('Form data integration:', hasSeoKeywords || hasProductUrl ? 'Active' : 'Inactive');\n\n// 6. FINAL RESEARCH INSTRUCTIONS\nlet finalInstructions = '';\n\nif (hasSeoKeywords || hasProductUrl) {\n  finalInstructions += `\\n\\n📋 CONTENT CREATION INSTRUCTIONS:\\n`;\n  \n  if (hasSeoKeywords) {\n    finalInstructions += `- NATURALLY integrate SEO keywords: ${formSeoKeywords}\\n`;\n    finalInstructions += `- Prioritize natural flow over keyword density\\n`;\n  }\n  \n  if (hasProductUrl) {\n    finalInstructions += `- REFERENCE information from: ${productFocusUrl}\\n`;\n    finalInstructions += `- Ensure content accuracy based on URL context\\n`;\n    finalInstructions += `- Do not mention the URL directly in content\\n`;\n  }\n  \n  finalInstructions += `- Combine research insights with form-specific requirements\\n`;\n  finalInstructions += `- Maintain ${socialContentType} content format and style\\n`;\n}\n\nenhancedResearchInsights += finalInstructions;\n\nreturn {\n  json: {\n    researchInsights: enhancedResearchInsights,\n    sources: sources,\n    researchQuery: queryData.researchQueries?.[0] || 'No query available',\n    businessContext: queryData.businessContext || {},\n    contentContext: queryData.contentContext || {},\n    \n    // Enhanced form data integration\n    formDataIntegration: {\n      seoKeywords: formSeoKeywords,\n      hasSeoKeywords: hasSeoKeywords,\n      keywordInsights: keywordInsights,\n      productUrl: productFocusUrl,\n      hasProductUrl: hasProductUrl,\n      productUrlPurpose: productUrlPurpose,\n      productUrlInsights: productUrlInsights,\n      integrationActive: hasSeoKeywords || hasProductUrl\n    },\n    \n    // Research quality metrics\n    researchQuality: researchQuality,\n    researchContext: researchContext,\n    \n    // Enhanced research status\n    hasResearchData: enhancedResearchInsights.length > 200,\n    hasFormDataEnhancement: hasSeoKeywords || hasProductUrl,\n    hasKeywordIntegration: hasSeoKeywords && keywordInsights.length > 0,\n    hasProductUrlIntegration: hasProductUrl,\n    \n    // Processing metadata\n    processingMetadata: {\n      originalResearchLength: researchInsights.length,\n      enhancedResearchLength: enhancedResearchInsights.length,\n      enhancementRatio: enhancedResearchInsights.length / Math.max(researchInsights.length, 1),\n      formDataEnhancementLength: finalInstructions.length,\n      totalSources: sources.length,\n      researchQualityScore: researchQuality.overallQuality\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        32
      ],
      "id": "46400390-4200-4678-b920-35ba5a400a5b",
      "name": "Process Research Results"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"={{ $('Prepare Research Queries').item.json.researchQueries[0] }}\",\n  \"search_depth\": \"advanced\",\n  \"include_answer\": true,\n  \"include_sources\": true,\n  \"max_results\": 5\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        32
      ],
      "id": "2a3c4b5d-e537-43ff-81d1-c6280b2b23cf",
      "name": "Tavily Search"
    },
    {
      "parameters": {
        "jsCode": "// Content Service Validation Node\n// Validates generated content aligns with actual business services\n\nconst generatedContent = $('GENERATE TEXT').item.json.output;\nconst dynamicData = $('Prepare Dynamic Data').item.json;\n\nconsole.log('=== CONTENT SERVICE ALIGNMENT VALIDATION ===');\nconsole.log('Business:', dynamicData.businessName);\nconsole.log('Content length:', generatedContent.length);\n\n// Get business configuration data\nconst businessNotes = dynamicData.businessNotes || '';\nconst customGlobalRules = dynamicData.customGlobalRules || '';\nconst businessCategory = dynamicData.businessCategory || '';\n\nconsole.log('Business Notes available:', businessNotes.length > 50);\nconsole.log('Global Rules available:', customGlobalRules.length > 50);\n\n// Content and business context in lowercase for analysis\nconst contentLower = generatedContent.toLowerCase();\nconst businessServicesLower = businessNotes.toLowerCase();\nconst businessRulesLower = customGlobalRules.toLowerCase();\n\n// DEFINE VALIDATION RULES BY BUSINESS CATEGORY\nconst validationRules = {\n  'Sports Coaching & Training': {\n    inappropriateServices: [\n      'virtual reality', 'vr training', 'ai analysis', 'machine learning',\n      'champions league', 'professional stadium', 'premier league',\n      'sports science lab', 'biomechanical analysis', 'video analysis suite',\n      'olympic training center', 'elite academy facilities', 'professional equipment lab'\n    ],\n    appropriateServices: [\n      'coaching', 'training', 'individual', 'youth development', 'skills',\n      'technique', 'practice', 'fundamental', 'confidence building'\n    ]\n  },\n  'Automotive': {\n    inappropriateServices: [\n      'formula 1 technology', 'racing team equipment', 'professional pit crew',\n      'motorsport facilities', 'computerized diagnostics suite'\n    ],\n    appropriateServices: [\n      'repair', 'maintenance', 'service', 'mot', 'diagnostic', 'parts', 'garage'\n    ]\n  },\n  'Plumbing': {\n    inappropriateServices: [\n      'industrial plant installation', 'commercial facility design',\n      'underwater welding', 'hazmat certified work'\n    ],\n    appropriateServices: [\n      'plumbing', 'heating', 'boiler', 'leak', 'installation', 'repair', 'emergency'\n    ]\n  },\n  'Travel & Cruise': {\n    inappropriateServices: [\n      'private yacht charter', 'luxury cruise ship ownership',\n      'maritime navigation training', 'cruise ship employment'\n    ],\n    appropriateServices: [\n      'cruise advice', 'travel tips', 'booking', 'destinations', 'cruise planning'\n    ]\n  }\n};\n\n// Get validation rules for this business category\nconst categoryRules = validationRules[businessCategory] || validationRules['Sports Coaching & Training'];\n\n// VALIDATION CHECKS\nconst validationResults = {\n  inappropriateServiceMentions: [],\n  missingAppropriateServices: [],\n  businessServiceAlignment: false,\n  contentWarnings: [],\n  contentStrengths: []\n};\n\n// 1. Check for inappropriate services mentioned\nconsole.log('\\n=== CHECKING FOR INAPPROPRIATE SERVICE MENTIONS ===');\ncategoryRules.inappropriateServices.forEach(service => {\n  if (contentLower.includes(service)) {\n    // Double-check: only flag if business doesn't actually offer this\n    if (!businessServicesLower.includes(service)) {\n      validationResults.inappropriateServiceMentions.push(service);\n      validationResults.contentWarnings.push(`⚠️ Content mentions \"${service}\" but business doesn't offer this service`);\n      console.log(`❌ INAPPROPRIATE: \"${service}\" mentioned but not offered`);\n    } else {\n      console.log(`✅ APPROPRIATE: \"${service}\" mentioned and business offers it`);\n    }\n  }\n});\n\n// 2. Check for appropriate service alignment\nconsole.log('\\n=== CHECKING FOR BUSINESS SERVICE ALIGNMENT ===');\nlet appropriateServiceCount = 0;\ncategoryRules.appropriateServices.forEach(service => {\n  if (contentLower.includes(service) || businessServicesLower.includes(service)) {\n    appropriateServiceCount++;\n    if (contentLower.includes(service) && businessServicesLower.includes(service)) {\n      validationResults.contentStrengths.push(`✅ Content aligns with business service: \"${service}\"`);\n      console.log(`✅ ALIGNED: \"${service}\" mentioned and business offers it`);\n    }\n  }\n});\n\nvalidationResults.businessServiceAlignment = appropriateServiceCount >= 2;\n\n// 3. Business-specific validation for key players\nif (dynamicData.businessName === 'BGK Goalkeeping') {\n  console.log('\\n=== BGK-SPECIFIC VALIDATION ===');\n  \n  // BGK should mention individual/personal coaching\n  if (businessServicesLower.includes('one-on-one') || businessServicesLower.includes('individual')) {\n    if (contentLower.includes('individual') || contentLower.includes('personal') || contentLower.includes('one-on-one')) {\n      validationResults.contentStrengths.push('✅ BGK: Individual coaching approach mentioned');\n    } else {\n      validationResults.contentWarnings.push('⚠️ BGK: Should emphasize individual coaching approach');\n    }\n  }\n  \n  // BGK should reference youth development\n  if (businessServicesLower.includes('youth') || businessServicesLower.includes('young')) {\n    if (contentLower.includes('youth') || contentLower.includes('young') || contentLower.includes('junior')) {\n      validationResults.contentStrengths.push('✅ BGK: Youth focus mentioned');\n    } else {\n      validationResults.contentWarnings.push('⚠️ BGK: Should emphasize youth development focus');\n    }\n  }\n  \n  // BGK should avoid expensive academy language\n  if (contentLower.includes('expensive') || contentLower.includes('academy') || contentLower.includes('elite')) {\n    if (businessRulesLower.includes('anti-establishment') || businessRulesLower.includes('affordable')) {\n      validationResults.contentStrengths.push('✅ BGK: Anti-establishment positioning maintained');\n    }\n  }\n}\n\n// 4. Global Content Rules Compliance\nif (customGlobalRules.length > 50) {\n  console.log('\\n=== CONTENT RULES COMPLIANCE CHECK ===');\n  \n  if (businessRulesLower.includes('never mention') || businessRulesLower.includes('avoid')) {\n    // Extract prohibited terms from rules (basic parsing)\n    const prohibitedTermsMatch = businessRulesLower.match(/never mention[^.]*|avoid[^.]*/g);\n    if (prohibitedTermsMatch) {\n      prohibitedTermsMatch.forEach(rule => {\n        console.log(`Checking rule: ${rule}`);\n        // This is a simplified check - could be enhanced with more sophisticated parsing\n      });\n    }\n  }\n  \n  validationResults.contentStrengths.push('✅ Business-specific content rules available and considered');\n}\n\n// 5. Calculate overall validation score\nconst totalWarnings = validationResults.contentWarnings.length;\nconst totalStrengths = validationResults.contentStrengths.length;\nconst inappropriateCount = validationResults.inappropriateServiceMentions.length;\n\nlet validationScore = 100;\nif (inappropriateCount > 0) validationScore -= (inappropriateCount * 30); // Major penalty\nif (totalWarnings > totalStrengths) validationScore -= 20; // Quality penalty\nif (!validationResults.businessServiceAlignment) validationScore -= 15; // Alignment penalty\n\nvalidationScore = Math.max(0, validationScore);\n\n// 6. Generate recommendations\nconst recommendations = [];\nif (inappropriateCount > 0) {\n  recommendations.push('CRITICAL: Remove mentions of services not offered by this business');\n}\nif (!validationResults.businessServiceAlignment) {\n  recommendations.push('IMPROVE: Include more references to actual business services');\n}\nif (totalWarnings > totalStrengths) {\n  recommendations.push('ENHANCE: Better align content with business capabilities');\n}\nif (validationScore > 85) {\n  recommendations.push('EXCELLENT: Content well-aligned with business services');\n}\n\nconsole.log('\\n=== VALIDATION RESULTS SUMMARY ===');\nconsole.log('Inappropriate services mentioned:', inappropriateCount);\nconsole.log('Business service alignment:', validationResults.businessServiceAlignment ? 'GOOD' : 'NEEDS IMPROVEMENT');\nconsole.log('Validation score:', validationScore + '%');\nconsole.log('Total warnings:', totalWarnings);\nconsole.log('Total strengths:', totalStrengths);\n\nconsole.log('\\n=== RECOMMENDATIONS ===');\nrecommendations.forEach(rec => console.log(rec));\n\nreturn {\n  json: {\n    // Pass through original content\n    originalContent: generatedContent,\n    \n    // Validation results\n    validationScore: validationScore,\n    validationPassed: validationScore >= 70,\n    businessServiceAlignment: validationResults.businessServiceAlignment,\n    \n    // Issues found\n    inappropriateServices: validationResults.inappropriateServiceMentions,\n    warnings: validationResults.contentWarnings,\n    strengths: validationResults.contentStrengths,\n    \n    // Business context\n    businessName: dynamicData.businessName,\n    businessCategory: businessCategory,\n    hasBusinessNotes: businessNotes.length > 50,\n    hasContentRules: customGlobalRules.length > 50,\n    \n    // Recommendations\n    recommendations: recommendations,\n    actionRequired: validationScore < 70 ? 'REVIEW_CONTENT' : 'PROCEED',\n    \n    // Summary\n    summary: {\n      totalIssues: inappropriateCount + Math.max(0, totalWarnings - totalStrengths),\n      qualityRating: validationScore >= 85 ? 'Excellent' : validationScore >= 70 ? 'Good' : 'Needs Review',\n      primaryConcern: inappropriateCount > 0 ? 'Service Misalignment' : \n                     !validationResults.businessServiceAlignment ? 'Weak Business Connection' : 'None',\n      readyForPublication: validationScore >= 70 && inappropriateCount === 0\n    },\n    \n    // Debug info\n    debug: {\n      contentLength: generatedContent.length,\n      businessNotesLength: businessNotes.length,\n      rulesLength: customGlobalRules.length,\n      categoryUsed: businessCategory,\n      validationRulesApplied: categoryRules.inappropriateServices.length + categoryRules.appropriateServices.length\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1888,
        32
      ],
      "id": "2ae81a9d-0e39-486e-971e-cef581e4d0a3",
      "name": "Content Validation Check"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "5c0a0393-a9ac-409f-8875-e01ff29ccfd3",
              "leftValue": "={{ $json.validationPassed }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2112,
        32
      ],
      "id": "3a8bf680-72f2-4c01-85b2-b20f02e6d164",
      "name": "If"
    },
    {
      "parameters": {
        "errorMessage": "Error - Validation Failed"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        2304,
        224
      ],
      "id": "342efb22-03d0-4692-a0aa-bc0bbe14a97e",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Prepare Dynamic Data').item.json.userRequirements.specificTopic }} - {{ $('Prepare Dynamic Data').item.json.userRequirements.contentBrief }} - {{ $json.formDataIntegration.ctaUrl }}",
        "options": {
          "systemMessage": "={{ $('Build Shortform System Message').item.json.systemMessage }} - must add CTA link if not blank, even if it breaks the word count {{ $json.formDataIntegration.ctaUrl }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2640,
        32
      ],
      "id": "91179795-e03c-4b21-8635-793b8b59b7f0",
      "name": "GENERATE SHORTFORM TEXT"
    },
    {
      "parameters": {
        "jsCode": "// Build Shortform System Message - ENHANCED WITH CTA WORD COUNT EXCEPTION\n// Allows CTA to break word count while keeping main content within limits\nconst dynamicData = $('Prepare Dynamic Data').item.json;\nconst businessNotes = dynamicData.businessNotes || '';\nconst seoStrategy = dynamicData.seoStrategy || '';\nconst shortformWordCount = dynamicData.shortformWordCount || 50;\n\n// Extract dual URL system from dynamic data\nconst formData = dynamicData.formData || {};\nconst formSeoKeywords = dynamicData.seoKeywords || '';\nconst hasSeoKeywords = dynamicData.hasSeoKeywords || false;\nconst productFocusUrl = dynamicData.productFocusUrl || '';\nconst hasProductFocusUrl = dynamicData.hasProductFocusUrl || false;\nconst ctaUrl = dynamicData.ctaUrl || '';\nconst hasCtaUrl = dynamicData.hasCtaUrl || false;\n\nconsole.log('=== BUILDING ENHANCED SHORTFORM SYSTEM MESSAGE WITH CTA EXCEPTION ===');\nconsole.log('Target word count:', shortformWordCount);\nconsole.log('Form SEO Keywords:', formSeoKeywords || 'None');\nconsole.log('Product Focus URL (research):', productFocusUrl || 'None');\nconsole.log('CTA URL (conversion):', ctaUrl || 'None');\nconsole.log('Has Product Focus URL:', hasProductFocusUrl);\nconsole.log('Has CTA URL:', hasCtaUrl);\nconsole.log('Dual URL System Status:', hasProductFocusUrl || hasCtaUrl ? 'Active' : 'Inactive');\n\n// Get research data safely\nlet researchInsights = '';\ntry {\n  const researchData = $('Process Research Results').item.json;\n  researchInsights = researchData.researchInsights || '';\n} catch (error) {\n  researchInsights = 'No specific research data available.';\n}\n\n// Calculate word allocation for main content vs CTA\nconst ctaWordAllowance = 8; // Reserve 8 words for CTA\nconst mainContentWordTarget = shortformWordCount - ctaWordAllowance;\n\nconsole.log('=== WORD COUNT ALLOCATION WITH CTA EXCEPTION ===');\nconsole.log('Total target words:', shortformWordCount);\nconsole.log('Main content target:', mainContentWordTarget);\nconsole.log('CTA allowance:', ctaWordAllowance, 'words (can exceed if needed)');\n\n// Create UNIVERSAL word count examples for main content only\nconst mainContentExamples = {\n  12: 'Quality matters. Professional service delivers results you can trust. Expert guidance available.',\n  22: 'Smart customers avoid outdated methods. Modern professional services deliver convenience, quality, and reliable results. Expert support included.',\n  32: 'Why settle for inconvenience? Professional services understand your time matters. Quality results delivered with modern efficiency and genuine care for customers.',\n  42: 'Traditional methods create frustration. Professional businesses focus on customer convenience, delivering quality results efficiently while respecting your valuable time, budget, and specific requirements for success.',\n  52: 'Most businesses follow outdated approaches that waste customer time. Professional services prioritize convenience, quality, and efficiency. Smart customers choose businesses that understand their specific needs and deliver consistent results.'\n};\n\n// Build SEO instructions based on form data\nlet seoInstructions = '';\nif (hasSeoKeywords && formSeoKeywords.trim() !== '') {\n  const keywords = formSeoKeywords.split(',').map(k => k.trim()).filter(k => k.length > 2);\n  \n  seoInstructions = `\\n🎯 SEO KEYWORDS INTEGRATION (CRITICAL):\\nPRIMARY KEYWORDS: ${keywords.join(', ')}\\n\\nKEYWORD INTEGRATION RULES:\\n- NATURALLY incorporate 1-2 of these keywords in your main content (${mainContentWordTarget} words)\\n- Do NOT force keywords - only use if they fit naturally\\n- Priority keywords: ${keywords.slice(0, 2).join(', ')}\\n- Keywords must flow naturally within the main content word limit\\n- If keywords don't fit naturally, prioritize content quality over keyword stuffing\\n\\nKEYWORD INTEGRATION EXAMPLES:\\n- Natural: \\\"Professional ${keywords[0]} services deliver convenience...\\\"\\n- Forced (AVOID): \\\"Our ${keywords[0]} ${keywords[1]} business provides ${keywords[2]}...\\\"\\n\\n`;\n} else if (seoStrategy && seoStrategy.length > 20) {\n  const businessKeywords = seoStrategy.split(',').map(k => k.trim()).slice(0, 2);\n  seoInstructions = `\\n🎯 BUSINESS SEO FOCUS:\\nConsider incorporating: ${businessKeywords.join(', ')} (only if natural)\\n`;\n}\n\n// Build Product Focus URL instructions (research only)\nlet productFocusUrlInstructions = '';\nif (hasProductFocusUrl && productFocusUrl) {\n  productFocusUrlInstructions = `\\n🔗 RESEARCH SOURCE INTEGRATION (IMPORTANT):\\nREFERENCE URL: ${productFocusUrl}\\n\\nRESEARCH INTEGRATION RULES:\\n- Use information from this URL to inform your content\\n- Align your ${mainContentWordTarget}-word main content with URL content/context\\n- Do NOT mention the URL directly in your response\\n- Extract relevant insights, features, or context from the URL\\n- Ensure content accuracy based on URL information\\n- Reference the methodology, approach, or insights from this source\\n- Maintain consistency with the source's expertise and perspective\\n\\nRESEARCH PURPOSE:\\n- This URL provides authoritative information for content accuracy\\n- Use it to validate facts, approaches, and recommendations\\n- Align your content with the source's professional standards\\n- Do NOT copy content - use insights to inform your original writing\\n\\n`;\n}\n\n// Build CTA URL instructions with word count exception\nlet ctaUrlInstructions = '';\nlet suggestedCta = 'Learn more';\nlet ctaUrgency = 'Take action today';\n\nif (hasCtaUrl && ctaUrl) {\n  // Analyze CTA URL to determine optimal call-to-action approach\n  try {\n    const ctaUrlObj = new URL(ctaUrl.startsWith('http') ? ctaUrl : 'https://' + ctaUrl);\n    const ctaPath = ctaUrlObj.pathname.toLowerCase();\n    \n    if (ctaPath.includes('book') || ctaPath.includes('appointment') || ctaPath.includes('schedule')) {\n      suggestedCta = 'Book now';\n      ctaUrgency = 'Schedule your appointment';\n    } else if (ctaPath.includes('quote') || ctaPath.includes('estimate')) {\n      suggestedCta = 'Get quote';\n      ctaUrgency = 'Request your free estimate';\n    } else if (ctaPath.includes('contact') || ctaPath.includes('get-in-touch')) {\n      suggestedCta = 'Contact us';\n      ctaUrgency = 'Get in touch today';\n    } else if (ctaPath.includes('shop') || ctaPath.includes('buy') || ctaPath.includes('purchase')) {\n      suggestedCta = 'Shop now';\n      ctaUrgency = 'Start shopping';\n    } else if (ctaPath.includes('learn') || ctaPath.includes('guide') || ctaPath.includes('resources')) {\n      suggestedCta = 'Learn more';\n      ctaUrgency = 'Discover how';\n    } else if (ctaPath.includes('call') || ctaPath.includes('phone')) {\n      suggestedCta = 'Call now';\n      ctaUrgency = 'Call today';\n    } else if (ctaPath.includes('email') || ctaPath.includes('message')) {\n      suggestedCta = 'Get in touch';\n      ctaUrgency = 'Send message';\n    }\n  } catch (error) {\n    console.log(`Using default CTA approach for URL: ${ctaUrl}`);\n  }\n  \n  ctaUrlInstructions = `\\n🎯 CALL-TO-ACTION DESTINATION (CRITICAL - CAN EXCEED WORD COUNT):\\nCTA URL: ${ctaUrl}\\nSUGGESTED ACTION: ${suggestedCta}\\nURGENCY PHRASE: ${ctaUrgency}\\n\\nCTA INTEGRATION RULES - WORD COUNT EXCEPTION:\\n- Write your main content in exactly ${mainContentWordTarget} words\\n- THEN add a compelling call-to-action (this CTA can exceed the ${shortformWordCount} word target)\\n- The CTA is the ONLY element allowed to break the word count\\n- Direct readers to take specific action related to this URL destination\\n- Do NOT include the full URL in your response (just the action)\\n- Create urgency and motivation to click through\\n- Use action-oriented language that matches the URL purpose\\n- Make the CTA feel natural and valuable, not pushy\\n\\nCTA EXAMPLES FOR YOUR URL (these can exceed word count):\\n- Effective: \\\"${suggestedCta} and discover the difference.\\\"\\n- Effective: \\\"Ready to get started? ${ctaUrgency}.\\\"\\n- Effective: \\\"${ctaUrgency} - your solution awaits.\\\"\\n- Avoid: \\\"Click here for more information.\\\"\\n- Avoid: \\\"Visit our website to learn more.\\\"\\n\\nCTA STRUCTURE:\\n- Main content: ${mainContentWordTarget} words (STRICT LIMIT)\\n- CTA: Variable words (NO LIMIT - can exceed total target)\\n- The CTA is essential for conversion and must be included\\n\\n`;\n} else {\n  // Default business CTA when no specific URL provided\n  ctaUrlInstructions = `\\n🎯 CALL-TO-ACTION (CRITICAL - CAN EXCEED WORD COUNT):\\nUSING BUSINESS TEMPLATE CTA\\n\\nCTA INTEGRATION RULES - WORD COUNT EXCEPTION:\\n- Write your main content in exactly ${mainContentWordTarget} words\\n- THEN add a compelling call-to-action using business template\\n- The CTA is the ONLY element allowed to break the word count\\n- Use business-appropriate call-to-action language\\n- Create clear next steps for the reader\\n\\nDEFAULT CTA EXAMPLES (these can exceed word count):\\n- \\\"Contact us to learn more.\\\"\\n- \\\"Get in touch today for expert advice.\\\"\\n- \\\"Speak to our team about your needs.\\\"\\n- \\\"Call us for personalized guidance.\\\"\\n\\nCTA STRUCTURE:\\n- Main content: ${mainContentWordTarget} words (STRICT LIMIT)\\n- CTA: Variable words (NO LIMIT - can exceed total target)\\n\\n`;\n}\n\n// Build combined URL instructions when both are present\nlet combinedUrlInstructions = '';\nif (hasProductFocusUrl && hasCtaUrl) {\n  combinedUrlInstructions = `\\n🔄 DUAL URL SYSTEM INTEGRATION WITH CTA EXCEPTION:\\nRESEARCH SOURCE: ${productFocusUrl}\\nCONVERSION DESTINATION: ${ctaUrl}\\n\\nDUAL URL STRATEGY WITH WORD COUNT EXCEPTION:\\n1. Use Product Focus URL insights to create authoritative main content (${mainContentWordTarget} words)\\n2. THEN add CTA directing to CTA URL (can exceed word count)\\n3. Bridge research credibility with conversion motivation\\n4. Create content that educates (from research) and converts (with CTA)\\n5. Maintain professional authority while driving clear action\\n\\nEXAMPLE DUAL URL APPROACH WITH CTA EXCEPTION:\\n\\\"[MAIN CONTENT - ${mainContentWordTarget} words using Product Focus URL insights] [CTA - unlimited words directing to CTA URL]\\\"\\n\\nThis creates content that is both credible and conversion-focused while respecting word count limits for content but allowing CTA flexibility.\\n\\n`;\n}\n\n// Build the comprehensive shortform system message with CTA exception\nconst shortformSystemMessage = `\n🚨 CRITICAL WORD COUNT PROTOCOL WITH CTA EXCEPTION 🚨\n\nMANDATORY TWO-PART STRUCTURE:\nPART 1: MAIN CONTENT - EXACTLY ${mainContentWordTarget} WORDS\nPART 2: CTA - UNLIMITED WORDS (CAN EXCEED TOTAL TARGET)\n\n🎯 SPECIAL CTA RULE: Only the Call-To-Action can exceed the word count limit. Everything else must stay within limits.\n\nCONTENT STRUCTURE REQUIREMENTS:\n1. MAIN CONTENT: Write exactly ${mainContentWordTarget} words about the topic (STOP AFTER ${mainContentWordTarget} WORDS)\n2. BLANK LINE: Leave one blank line\n3. CTA: Add compelling call-to-action (this can exceed the ${shortformWordCount} word target)\n4. The CTA is ESSENTIAL and must be included even if it breaks the word count\n\nMANDATORY STRUCTURE FORMAT:\nStep 1: Write your main content about the topic - exactly ${mainContentWordTarget} words\nStep 2: Leave one blank line\nStep 3: Write your call-to-action - unlimited words\n\nWORD COUNTING INSTRUCTIONS FOR MAIN CONTENT:\n1. Write your main content about the topic\n2. Count every word: 1, 2, 3, 4... up to ${mainContentWordTarget}\n3. STOP at exactly ${mainContentWordTarget} words\n4. Add blank line\n5. THEN add your CTA (no word limit for CTA)\n6. The CTA must be present but is separate from the ${mainContentWordTarget} word count\n\nWORD COUNTING INSTRUCTIONS:\n1. Write your main content\n2. Count every word: 1, 2, 3, 4... up to ${mainContentWordTarget}\n3. If main content has ${mainContentWordTarget + 1} words, DELETE one word from main content\n4. If main content has ${mainContentWordTarget - 1} words, ADD one word to main content\n5. THEN add your CTA (no word limit for CTA)\n6. COUNT AGAIN to verify main content is exactly ${mainContentWordTarget} words\n\nEXAMPLE STRUCTURE:\nMain Content (${mainContentWordTarget} words): \\\"${mainContentExamples[mainContentWordTarget] || `Write exactly ${mainContentWordTarget} words about the topic using professional business language.`}\\\"\nCTA (unlimited): \\\"${suggestedCta} and discover the difference today.\\\"\n\n${seoInstructions}${productFocusUrlInstructions}${ctaUrlInstructions}${combinedUrlInstructions}\n\nBUSINESS CONTEXT:\n${businessNotes}\n\nTOPIC: Write about ${dynamicData.specificTopic}\nBUSINESS TYPE: ${dynamicData.businessCategory}\n\nRESEARCH INSIGHTS:\n${researchInsights.substring(0, 400)}...\n\nWRITING RULES:\n- British English spelling (colour, realise, centre, organised)\n- Conversational tone (like explaining to a friend)\n- Strong hook opening (grab attention immediately)\n- Main content: ${mainContentWordTarget} words exactly\n- CTA: Clear call-to-action (can exceed word count)\n- No hashtags or social media symbols\n- No corporate jargon or buzzwords\n- Focus on services this business actually provides\n- Use specific examples, not vague statements\n- Ask engaging questions when appropriate\n- Tell mini-stories within the word limit\n- No em dashes, and never use them, replacing them with commas or semi colons (where necessary)\n- Never ever fabricate a story or customer testimonial, only use reliable online sources for stories about the business.  Only use online sources for testimonials (Google Reviews, Facebook Reviews, etc.)\n\nCONTENT REQUIREMENTS:\n- Hook (attention-grabbing opening)\n- Value (useful information or insight)\n- Action (clear next step for reader - this is your CTA)\n- Main content: exactly ${mainContentWordTarget} words\n- CTA: unlimited words (essential for conversion)\n\nFORBIDDEN WORDS/PHRASES:\n- \\\"cutting-edge\\\" / \\\"state-of-the-art\\\" / \\\"game-changing\\\"\n- \\\"seamless\\\" / \\\"leverage\\\" / \\\"synergy\\\"\n- \\\"innovative solutions\\\" / \\\"comprehensive approach\\\"\n- Excessive hyphens (use commas instead)\n- EM dashes (use commas or ; (where necessary))\n\nNATURAL WRITING STYLE:\n- Start sentences differently (avoid \\\"The\\\" or \\\"Our\\\")\n- Mix short and longer sentences within word limit\n- Use contractions (don't, can't, won't) to save words in main content\n- Connect ideas with: and, but, because, so, while, when\n- Be specific and concrete, not vague and abstract\n- no em dashes, and never use them, replacing them with commas or ; (where necessary)\n\n${hasProductFocusUrl && hasCtaUrl ? \n`DUAL URL CONTENT STRATEGY WITH CTA EXCEPTION:\n1. Use research insights from Product Focus URL for credible main content (${mainContentWordTarget} words)\n2. Build compelling value proposition within word limit\n3. Add strong CTA directing to CTA URL (unlimited words - essential)\n4. Balance education with conversion\n5. Main content must stay within ${mainContentWordTarget} words, CTA can exceed` :\nhasProductFocusUrl ?\n`RESEARCH-INFORMED CONTENT STRATEGY WITH CTA EXCEPTION:\n1. Base main content on insights from Product Focus URL (${mainContentWordTarget} words)\n2. Ensure accuracy and authority within word limit\n3. Add compelling CTA (unlimited words - essential)\n4. Build credible, trustworthy content with strong conversion element` :\nhasCtaUrl ?\n`CONVERSION-FOCUSED CONTENT STRATEGY WITH CTA EXCEPTION:\n1. Build compelling value proposition in main content (${mainContentWordTarget} words)\n2. Create urgency and motivation within word limit\n3. Add strong call-to-action directing to CTA URL (unlimited words - essential)\n4. Drive specific action while respecting main content word limits` :\n`STANDARD CONTENT STRATEGY WITH CTA EXCEPTION:\n1. Create engaging, valuable main content (${mainContentWordTarget} words)\n2. Use business template for compelling CTA (unlimited words - essential)\n3. Focus on topic expertise within word limits\n4. Drive general business engagement with strong call-to-action`}\n\nOUTPUT REQUIREMENTS:\nMain Content: Write exactly ${mainContentWordTarget} words about the topic\nCTA: Add compelling call-to-action (no word limit - this can exceed the ${shortformWordCount} word target)\nDo NOT include \\\"WORD COUNT: X\\\" in your response.\nDo NOT add word count verification text or any additional notes.\nYour response should be pure content only.\n\n🚨 FINAL REMINDER: \n- Main content: EXACTLY ${mainContentWordTarget} WORDS \n- CTA: UNLIMITED WORDS (can exceed total target)\n- CTA is ESSENTIAL and MUST be included\n- Count main content words before adding CTA\n- No word count verification text in output\n🚨\n`;\n\nconsole.log('✅ Enhanced shortform system message built with CTA word count exception');\nconsole.log('Main content target:', mainContentWordTarget, 'words');\nconsole.log('CTA allowance: UNLIMITED (can exceed total target)');\nconsole.log('SEO Keywords integrated:', hasSeoKeywords);\nconsole.log('Product Focus URL integrated:', hasProductFocusUrl);\nconsole.log('CTA URL integrated:', hasCtaUrl);\nconsole.log('Suggested CTA:', suggestedCta);\nconsole.log('System message length:', shortformSystemMessage.length);\n\nreturn {\n  json: {\n    systemMessage: shortformSystemMessage,\n    \n    // Enhanced integration tracking\n    integrationStatus: {\n      seoKeywords: hasSeoKeywords,\n      productFocusUrl: hasProductFocusUrl,\n      ctaUrl: hasCtaUrl,\n      dualUrlSystem: hasProductFocusUrl && hasCtaUrl,\n      businessContext: businessNotes.length > 50,\n      researchData: researchInsights.length > 100,\n      mainContentWordTarget: mainContentWordTarget,\n      ctaWordException: true\n    },\n    \n    // CTA Exception tracking\n    ctaException: {\n      enabled: true,\n      mainContentWordLimit: mainContentWordTarget,\n      ctaWordLimit: 'unlimited',\n      totalTargetOriginal: shortformWordCount,\n      ctaCanExceed: true,\n      ctaEssential: true,\n      suggestedCta: suggestedCta,\n      ctaUrgency: ctaUrgency\n    },\n    \n    // Dual URL system tracking\n    dualUrlSystemIntegration: {\n      productFocusUrl: productFocusUrl,\n      hasProductFocusUrl: hasProductFocusUrl,\n      ctaUrl: ctaUrl,\n      hasCtaUrl: hasCtaUrl,\n      systemLevel: hasProductFocusUrl && hasCtaUrl ? 'complete' : \n                   hasProductFocusUrl ? 'research_only' :\n                   hasCtaUrl ? 'conversion_only' : 'business_templates',\n      researchPurpose: hasProductFocusUrl ? 'Content accuracy and authority' : 'General topic research',\n      conversionPurpose: hasCtaUrl ? 'Dedicated CTA destination' : 'Business template CTA',\n      contentStrategy: hasProductFocusUrl && hasCtaUrl ? 'research_informed_conversion_focused_with_cta_exception' :\n                      hasProductFocusUrl ? 'research_informed_authority_building_with_cta_exception' :\n                      hasCtaUrl ? 'conversion_focused_engagement_with_cta_exception' : 'standard_engagement_with_cta_exception'\n    },\n    \n    // Form data tracking\n    formDataIntegration: {\n      seoKeywords: formSeoKeywords,\n      seoKeywordsCount: formSeoKeywords ? formSeoKeywords.split(',').length : 0,\n      productFocusUrl: productFocusUrl,\n      ctaUrl: ctaUrl,\n      hasFormSeoKeywords: hasSeoKeywords,\n      hasProductFocusUrl: hasProductFocusUrl,\n      hasCtaUrl: hasCtaUrl,\n      enhancementLevel: (hasSeoKeywords && hasProductFocusUrl && hasCtaUrl) ? 'premium_with_cta_exception' :\n                       (hasSeoKeywords && (hasProductFocusUrl || hasCtaUrl)) ? 'enhanced_with_cta_exception' :\n                       (hasProductFocusUrl || hasCtaUrl) ? 'standard_plus_with_cta_exception' : 'standard_with_cta_exception'\n    },\n    \n    // System message components\n    components: {\n      baseWordCountProtocol: true,\n      ctaExceptionProtocol: true,\n      seoInstructions: !!seoInstructions,\n      productFocusUrlInstructions: !!productFocusUrlInstructions,\n      ctaUrlInstructions: !!ctaUrlInstructions,\n      combinedUrlInstructions: !!combinedUrlInstructions,\n      businessContext: businessNotes.length > 50,\n      researchInsights: researchInsights.length > 50,\n      writingRules: true,\n      naturalWritingGuidelines: true,\n      dualUrlStrategy: hasProductFocusUrl && hasCtaUrl,\n      ctaWordCountException: true\n    },\n    \n    // Quality metrics\n    qualityMetrics: {\n      enhancementLevel: (hasSeoKeywords && hasProductFocusUrl && hasCtaUrl) ? 'fully_enhanced_dual_url_with_cta_exception' :\n                       (hasSeoKeywords && hasProductFocusUrl) ? 'enhanced_research_seo_with_cta_exception' :\n                       (hasSeoKeywords && hasCtaUrl) ? 'enhanced_conversion_seo_with_cta_exception' :\n                       (hasProductFocusUrl && hasCtaUrl) ? 'enhanced_dual_url_with_cta_exception' :\n                       (hasSeoKeywords || hasProductFocusUrl || hasCtaUrl) ? 'partially_enhanced_with_cta_exception' : 'standard_with_cta_exception',\n      formDataUtilization: hasSeoKeywords || hasProductFocusUrl || hasCtaUrl ? 'active' : 'inactive',\n      businessDataUtilization: businessNotes.length > 50 ? 'active' : 'limited',\n      researchDataUtilization: researchInsights.length > 100 ? 'active' : 'limited',\n      dualUrlSystemUtilization: hasProductFocusUrl && hasCtaUrl ? 'fully_active' :\n                               hasProductFocusUrl || hasCtaUrl ? 'partially_active' : 'inactive',\n      ctaExceptionUtilization: 'active'\n    },\n    \n    // Debug information\n    debug: {\n      mainContentWordTarget: mainContentWordTarget,\n      ctaWordAllowance: 'unlimited',\n      originalWordTarget: shortformWordCount,\n      ctaExceptionEnabled: true,\n      exampleUsed: !!mainContentExamples[mainContentWordTarget],\n      seoKeywordsProvided: !!formSeoKeywords,\n      productFocusUrlProvided: !!productFocusUrl,\n      ctaUrlProvided: !!ctaUrl,\n      systemMessageLength: shortformSystemMessage.length,\n      researchInsightsLength: researchInsights.length,\n      businessNotesLength: businessNotes.length,\n      integrationComplexity: [hasSeoKeywords, hasProductFocusUrl, hasCtaUrl].filter(Boolean).length + '/3',\n      ctaExceptionActive: true\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        32
      ],
      "id": "a602f4ce-fe05-4c45-989e-44351029957f",
      "name": "Build Shortform System Message"
    },
    {
      "parameters": {
        "jsCode": "// Add this debugging code to your \"Debug Content Generation\" node\n// or create a new debug node after \"Prepare Dynamic Data\"\n\nconst dynamicData = $('Prepare Dynamic Data').item.json;\n\nconsole.log('=== CRITICAL CONTENT DEBUGGING ===');\nconsole.log('Content Brief (what should be sent to AI):', dynamicData.contentBrief);\nconsole.log('Content Brief Length:', dynamicData.contentBrief ? dynamicData.contentBrief.length : 0);\nconsole.log('Specific Topic:', dynamicData.specificTopic);\nconsole.log('Social Content Type:', dynamicData.socialContentType);\n\n// Check business configuration overrides\nconsole.log('\\n=== BUSINESS CONFIGURATION OVERRIDES ===');\nconsole.log('Custom Global Rules:', dynamicData.customGlobalRules || 'None');\nconsole.log('Business Notes:', dynamicData.businessNotes || 'None');\nconsole.log('Has Custom Rules:', dynamicData.hasCustomRules);\nconsole.log('Rules Source:', dynamicData.rulesSource);\n\n// Check system message\nconsole.log('\\n=== SYSTEM MESSAGE CHECK ===');\nconsole.log('System Message Length:', dynamicData.systemMessage ? dynamicData.systemMessage.length : 0);\nconsole.log('System Message Preview:', dynamicData.systemMessage ? dynamicData.systemMessage.substring(0, 200) + '...' : 'None');\n\n// Check for overrides\nconsole.log('\\n=== OVERRIDE CHECK ===');\nconsole.log('Has System Override:', dynamicData.hasSystemOverride);\n\n// Form data check\nconsole.log('\\n=== FORM DATA CHECK ===');\nconsole.log('Form Data Available:', !!dynamicData.formData);\nif (dynamicData.formData) {\n  console.log('Form Content Brief:', dynamicData.formData.contentBrief);\n  console.log('Form Specific Topic:', dynamicData.formData.specificTopic);\n  console.log('Form Business Name:', dynamicData.formData.businessName);\n}\n\nreturn {\n  json: {\n    // Pass through the data\n    ...dynamicData,\n    \n    // Add debug info\n    debugInfo: {\n      contentBriefExists: !!dynamicData.contentBrief,\n      contentBriefLength: dynamicData.contentBrief ? dynamicData.contentBrief.length : 0,\n      specificTopicExists: !!dynamicData.specificTopic,\n      hasCustomRules: dynamicData.hasCustomRules,\n      hasBusinessOverrides: !!(dynamicData.customGlobalRules && dynamicData.customGlobalRules.length > 50),\n      formDataExists: !!dynamicData.formData,\n      criticalIssue: !dynamicData.contentBrief || dynamicData.contentBrief.length < 10\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2512,
        -240
      ],
      "id": "467d3742-ece5-4d94-a0c0-632e92541104",
      "name": "Debug Logging"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        784,
        -560
      ],
      "id": "ce75d3ac-d5a8-4a2f-b87a-8173a970a188",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a5dfa2b9-cc51-46fd-aa61-1a46f8a9a0ec",
              "leftValue": "={ $node[\"SplitInBatches\"].context[\"noItemsLeft\"] }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3104,
        928
      ],
      "id": "6b32fd6a-da9f-4fb6-8f37-21acd4ce3d5e",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "// CSV to Form Data Mapping\n// Replace your \"On form submission\" node with this code\n\nconsole.log('=== MAPPING CSV ROW TO FORM DATA FORMAT ===');\n\n// Get the CSV row data from SplitInBatches\nconst csvRow = $json;\nconsole.log('CSV row received:', csvRow);\n\n// Log all available CSV columns to debug\nconsole.log('Available CSV columns:', Object.keys(csvRow));\n\n// Map CSV columns to the form field names that \"Process Form Data\" expects\nconst formData = {\n  // Map CSV 'Title' to form 'Business Name'\n  'Business Name': csvRow['Title'] || csvRow['Business Name'] || '',\n  \n  // Map CSV social content type field (check multiple possible column names)\n  'Social Content Type': csvRow['Social Content Type'] || \n                          csvRow['Content Type'] || \n                          csvRow['Type'] || \n                          'Educational', // Default fallback\n  \n  // Map CSV topic field\n  'Specific Topic': csvRow['Specific Topic'] || \n                    csvRow['Topic'] || \n                    csvRow['Subject'] || \n                    '',\n  \n  // Map CSV content brief field  \n  'Content Brief': csvRow['Content Brief'] || \n                   csvRow['Brief'] || \n                   csvRow['Description'] || \n                   csvRow['Content'] || \n                   '',\n  \n  // Map CSV word count field\n  'Word Count Target': csvRow['Word Count Target'] || \n                       csvRow['Word Count'] || \n                       csvRow['Words'] || \n                       '50', // Default fallback\n  \n  // Map CSV URL fields\n  'Product Focus URL': csvRow['Product Focus URL'] || \n                       csvRow['Product URL'] || \n                       csvRow['Reference URL'] || \n                       '',\n  \n  'CTA URL': csvRow['CTA URL'] || \n             csvRow['Call to Action URL'] || \n             csvRow['Action URL'] || \n             '',\n  \n  // Map CSV SEO keywords\n  'SEO Keywords': csvRow['SEO Keywords'] || \n                  csvRow['Keywords'] || \n                  csvRow['Tags'] || \n                  ''\n};\n\nconsole.log('Mapped form data:', formData);\n\n// Validate that we have the essential fields\nconst requiredFields = ['Business Name', 'Specific Topic', 'Content Brief'];\nconst missingFields = requiredFields.filter(field => \n  !formData[field] || formData[field].trim() === ''\n);\n\nif (missingFields.length > 0) {\n  console.log('⚠️ Missing required fields:', missingFields);\n  console.log('⚠️ Available CSV columns were:', Object.keys(csvRow));\n  \n  // Return data with skip flag so the workflow can handle it\n  return [{\n    json: {\n      ...formData,\n      skipRow: true,\n      skipReason: `Missing required fields: ${missingFields.join(', ')}`,\n      availableColumns: Object.keys(csvRow),\n      csvRowData: csvRow\n    }\n  }];\n}\n\nconsole.log('✅ Successfully mapped CSV row to form data format');\nconsole.log('Business:', formData['Business Name']);\nconsole.log('Topic:', formData['Specific Topic']);\nconsole.log('Content Brief length:', formData['Content Brief'].length);\n\nreturn [{\n  json: formData\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1552,
        -240
      ],
      "id": "0535b81c-5707-4104-8a12-83acea9b7992",
      "name": "On form submission"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        784,
        -256
      ],
      "id": "2a457719-2a05-477d-9048-b39b1ed5638d",
      "name": "SplitInBatches"
    },
    {
      "parameters": {
        "jsCode": "// Updated CSV Row Mapping - Simplified\n// Replace your existing CSV Row Mapping node with this\n\nconsole.log('=== PROCESSING PARSED CSV ROW ===');\n\n// Get the current row from SplitInBatches (already parsed)\nconst csvRow = $json;\nconsole.log('Raw CSV row data:', csvRow);\n\n// The row is already parsed into an object with proper headers\n// Just map to your form field structure\nconst mappedData = {\n  'Business Name': csvRow['Business Name'] || '',\n  'Social Content Type': csvRow['Social Content Type'] || 'Educational',\n  'Specific Topic': csvRow['Specific Topic'] || '',\n  'Content Brief': csvRow['Content Brief'] || '',\n  'Word Count Target': csvRow['Word Count Target'] || '50',\n  'Product Focus URL': csvRow['Product Focus URL'] || '',\n  'CTA URL': csvRow['CTA URL'] || '',\n  'SEO Keywords': csvRow['SEO Keywords'] || ''\n};\n\nconsole.log('Mapped form data:', mappedData);\n\n// Validate required fields\nconst requiredFields = ['Business Name', 'Specific Topic', 'Content Brief'];\nconst missingFields = requiredFields.filter(field => !mappedData[field] || mappedData[field].trim() === '');\n\nif (missingFields.length > 0) {\n  console.log('⚠️ Missing required fields:', missingFields);\n  console.log('⚠️ Skipping this row due to missing data');\n  return [{ \n    json: { \n      ...mappedData,\n      skipRow: true,\n      skipReason: `Missing required fields: ${missingFields.join(', ')}`\n    } \n  }];\n}\n\nconsole.log('✅ Row mapped successfully for:', mappedData['Business Name']);\n\nreturn [{ json: mappedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        -240
      ],
      "id": "a43c9174-0313-4541-8028-7e8bdefd70e8",
      "name": "CSV Row Mapping"
    },
    {
      "parameters": {
        "jsCode": "// Content Requests CSV Parser\n// Use this if you want to process content requests instead of business configs\n\nconst csvData = $json;\n\nconsole.log('=== CONTENT REQUESTS CSV PARSING ===');\nconsole.log('CSV success status:', csvData.success);\n\nif (!csvData.success) {\n  throw new Error(`CSV reading failed: ${csvData.error}`);\n}\n\nif (!csvData.csvContent) {\n  throw new Error('No CSV content found in input data');\n}\n\nconsole.log('CSV content length:', csvData.csvContent.length);\nconsole.log('CSV content preview:', csvData.csvContent.substring(0, 300));\n\ntry {\n  // Split CSV content into lines and filter out empty lines\n  const allLines = csvData.csvContent.split(/\\r?\\n/);\n  const lines = allLines.filter(line => line.trim() !== '');\n  \n  console.log('Total lines in file:', allLines.length);\n  console.log('Non-empty lines:', lines.length);\n  console.log('First few lines:', lines.slice(0, 3));\n  \n  if (lines.length < 2) {\n    console.log('⚠️ CSV file only has', lines.length, 'lines');\n    throw new Error(`CSV file must have at least header row and one data row. Found only ${lines.length} lines.`);\n  }\n  \n  // Get header row\n  const headerLine = lines[0];\n  console.log('Header line:', headerLine);\n  \n  // Parse headers - handle quoted CSV\n  const headers = [];\n  let currentHeader = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < headerLine.length; i++) {\n    const char = headerLine[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      headers.push(currentHeader.trim().replace(/^\"|\"$/g, ''));\n      currentHeader = '';\n    } else {\n      currentHeader += char;\n    }\n  }\n  headers.push(currentHeader.trim().replace(/^\"|\"$/g, '')); // Add last header\n  \n  console.log('Parsed headers:', headers);\n  console.log('Number of headers:', headers.length);\n  \n  // For content requests CSV, we need different validation\n  const expectedHeaders = ['Social Content Type', 'Specific Topic', 'Content Brief'];\n  const missingHeaders = expectedHeaders.filter(req => !headers.includes(req));\n  \n  if (missingHeaders.length > 0) {\n    console.log('⚠️ Missing expected content headers:', missingHeaders);\n    console.log('Available headers:', headers);\n    \n    // If it doesn't have content headers, maybe it's the business config after all\n    if (headers.includes('Title') || headers.includes('Business Category')) {\n      throw new Error('This appears to be a Business Configuration CSV, not a Content Requests CSV. Use the Business Config parser instead.');\n    }\n    \n    console.log('🤔 Proceeding with available headers - may be a different format');\n  }\n  \n  // Parse data rows (skip header row)\n  const dataRows = [];\n  \n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n    \n    console.log(`Parsing row ${i}:`, line.substring(0, 100) + '...');\n    \n    // Parse CSV values - handle quoted fields properly\n    const values = [];\n    let currentValue = '';\n    let inQuotes = false;\n    \n    for (let j = 0; j < line.length; j++) {\n      const char = line[j];\n      \n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        values.push(currentValue.trim().replace(/^\"|\"$/g, ''));\n        currentValue = '';\n      } else {\n        currentValue += char;\n      }\n    }\n    values.push(currentValue.trim().replace(/^\"|\"$/g, '')); // Add last value\n    \n    // Create row object by mapping headers to values\n    const rowObject = {};\n    headers.forEach((header, index) => {\n      rowObject[header] = values[index] || '';\n    });\n    \n    console.log(`Row ${i} object:`, rowObject);\n    \n    // For content requests, we need Specific Topic and Content Brief\n    const hasRequiredContent = rowObject['Specific Topic'] && \n                              rowObject['Specific Topic'].trim() !== '' &&\n                              rowObject['Content Brief'] && \n                              rowObject['Content Brief'].trim() !== '';\n    \n    if (hasRequiredContent) {\n      dataRows.push(rowObject);\n      console.log(`✅ Row ${i}: ${rowObject['Specific Topic']} - VALID (included)`);\n    } else {\n      console.log(`⚠️ Row ${i}: Missing topic or brief - skipped`);\n    }\n  }\n  \n  console.log('=== CONTENT REQUESTS CSV PARSING RESULTS ===');\n  console.log('Total valid content requests found:', dataRows.length);\n  console.log('Topics:', dataRows.map(row => row['Specific Topic']));\n  \n  if (dataRows.length === 0) {\n    throw new Error('No valid content requests found in CSV file. Check that rows have Specific Topic and Content Brief.');\n  }\n  \n  // Return array of content request objects for SplitInBatches\n  console.log('✅ Content requests CSV parsing successful - returning', dataRows.length, 'content requests');\n  return dataRows.map(row => ({ json: row }));\n  \n} catch (error) {\n  console.error('❌ Content requests CSV parsing error:', error.message);\n  console.error('CSV content that failed:', csvData.csvContent.substring(0, 500));\n  \n  return [{\n    json: {\n      error: error.message,\n      csvFile: csvData.csvFileName || 'unknown',\n      success: false,\n      csvContentPreview: csvData.csvContent ? csvData.csvContent.substring(0, 200) : 'No content',\n      detectedHeaders: csvData.csvContent ? csvData.csvContent.split('\\n')[0] : 'No headers'\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1632,
        -560
      ],
      "id": "ea4447c8-b4d9-406d-bbec-4ac1a7eda8ad",
      "name": "CSV Parsing"
    },
    {
      "parameters": {
        "jsCode": "// N8N Binary Data CSV Reader - Uses N8N's proper binary data access\n// Replace your Google Drive CSV Reader with this\n\nconsole.log('=== N8N BINARY DATA CSV READER ===');\n\nlet csvContent = '';\n\ntry {\n  console.log('Binary data analysis:');\n  console.log('- $binary keys:', $binary ? Object.keys($binary) : 'No binary');\n  \n  if ($binary && $binary.data) {\n    console.log('- Binary data type:', typeof $binary.data);\n    console.log('- Binary data sample:', JSON.stringify($binary.data).substring(0, 300));\n  }\n\n  // Method 1: Use N8N's getNodeParameter for binary data\n  try {\n    console.log('Attempting Method 1: N8N getNodeParameter...');\n    const binaryData = $input.binary.data;\n    if (binaryData) {\n      csvContent = binaryData.toString('utf8');\n      console.log('✅ Method 1: getNodeParameter worked');\n    }\n  } catch (e) {\n    console.log('❌ Method 1 failed:', e.message);\n  }\n\n  // Method 2: Direct access to $input.binary\n  if (!csvContent) {\n    try {\n      console.log('Attempting Method 2: Direct $input.binary access...');\n      \n      if ($input && $input.binary && $input.binary.data) {\n        const binaryItem = $input.binary.data;\n        console.log('Binary item type:', typeof binaryItem);\n        console.log('Binary item constructor:', binaryItem.constructor.name);\n        \n        if (Buffer.isBuffer(binaryItem)) {\n          csvContent = binaryItem.toString('utf8');\n          console.log('✅ Method 2a: Buffer conversion worked');\n        } else if (binaryItem.toString) {\n          csvContent = binaryItem.toString();\n          console.log('✅ Method 2b: toString() worked');\n        }\n      }\n    } catch (e) {\n      console.log('❌ Method 2 failed:', e.message);\n    }\n  }\n\n  // Method 3: Use N8N's this.helpers.getBinaryDataBuffer\n  if (!csvContent) {\n    try {\n      console.log('Attempting Method 3: N8N getBinaryDataBuffer...');\n      \n      // This is the proper N8N way to get binary data\n      const binaryBuffer = await this.helpers.getBinaryDataBuffer(0, 'data');\n      if (binaryBuffer) {\n        csvContent = binaryBuffer.toString('utf8');\n        console.log('✅ Method 3: getBinaryDataBuffer worked');\n      }\n    } catch (e) {\n      console.log('❌ Method 3 failed:', e.message);\n    }\n  }\n\n  // Method 4: Access binary data through item context\n  if (!csvContent) {\n    try {\n      console.log('Attempting Method 4: Item context access...');\n      \n      const item = $input;\n      if (item && item.binary && item.binary.data) {\n        // Try to access the actual file content\n        const binaryDataInfo = item.binary.data;\n        console.log('Binary data info:', binaryDataInfo);\n        \n        // If it has a data property that's a Buffer\n        if (binaryDataInfo.data && Buffer.isBuffer(binaryDataInfo.data)) {\n          csvContent = binaryDataInfo.data.toString('utf8');\n          console.log('✅ Method 4a: Item binary data Buffer worked');\n        }\n        // If it has content stored as base64\n        else if (binaryDataInfo.data && typeof binaryDataInfo.data === 'string') {\n          try {\n            const buffer = Buffer.from(binaryDataInfo.data, 'base64');\n            csvContent = buffer.toString('utf8');\n            console.log('✅ Method 4b: Base64 decode worked');\n          } catch (e) {\n            csvContent = binaryDataInfo.data;\n            console.log('✅ Method 4c: Direct string access worked');\n          }\n        }\n      }\n    } catch (e) {\n      console.log('❌ Method 4 failed:', e.message);\n    }\n  }\n\n  // Method 5: Try to reconstruct from filesystem reference\n  if (!csvContent && $binary && $binary.data && $binary.data.id) {\n    try {\n      console.log('Attempting Method 5: Filesystem reference...');\n      \n      // The binary data has an id property pointing to filesystem\n      const fileId = $binary.data.id;\n      console.log('File system ID:', fileId);\n      \n      // Try to access through N8N's binary data system\n      // Note: This might not work in all N8N environments\n      const binaryDataManager = this.helpers.getBinaryDataManager();\n      if (binaryDataManager) {\n        const fileBuffer = await binaryDataManager.retrieveBinaryData(fileId);\n        if (fileBuffer) {\n          csvContent = fileBuffer.toString('utf8');\n          console.log('✅ Method 5: Filesystem retrieval worked');\n        }\n      }\n    } catch (e) {\n      console.log('❌ Method 5 failed:', e.message);\n    }\n  }\n\n  // Final validation\n  if (!csvContent) {\n    throw new Error('Could not extract CSV content using any N8N method');\n  }\n  \n  if (csvContent === '[object Object]') {\n    throw new Error('CSV content is still [object Object]');\n  }\n  \n  if (csvContent.length < 50) {\n    throw new Error(`CSV content too short (${csvContent.length} chars)`);\n  }\n\n  console.log('✅ CSV EXTRACTION SUCCESSFUL!');\n  console.log('- Content length:', csvContent.length);\n  console.log('- First 300 chars:', csvContent.substring(0, 300));\n  console.log('- Has commas:', csvContent.includes(','));\n  console.log('- Has newlines:', csvContent.includes('\\n'));\n  \n  const lines = csvContent.split(/\\r?\\n/).filter(line => line.trim());\n  console.log('- Total lines:', lines.length);\n  \n  if (lines.length > 0) {\n    console.log('- First line (headers):', lines[0]);\n  }\n\n  return {\n    json: {\n      csvContent: csvContent,\n      csvFileName: 'Business_Configurations.csv',\n      success: true,\n      lineCount: lines.length,\n      contentLength: csvContent.length\n    }\n  };\n  \n} catch (error) {\n  console.error('❌ N8N CSV EXTRACTION FAILED:', error.message);\n  \n  // Provide detailed debug info\n  console.log('=== N8N BINARY DEBUG INFO ===');\n  console.log('$input structure:', $input);\n  console.log('$binary structure:', $binary);\n  \n  if ($binary && $binary.data) {\n    const binaryData = $binary.data;\n    console.log('Binary data properties:', Object.keys(binaryData));\n    console.log('Binary data content:', JSON.stringify(binaryData, null, 2));\n  }\n  \n  return {\n    json: {\n      error: error.message,\n      success: false,\n      csvFileName: 'Business_Configurations.csv',\n      debugInfo: {\n        inputStructure: $input,\n        binaryStructure: $binary,\n        binaryDataProperties: $binary && $binary.data ? Object.keys($binary.data) : null,\n        fullBinaryData: $binary && $binary.data ? JSON.stringify($binary.data, null, 2) : null\n      }\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        -560
      ],
      "id": "e5ddab81-5efb-4434-9c4b-380f48a565e8",
      "name": "Google Drive CSV Reader"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1120,
        -336
      ],
      "id": "289e190d-4519-46e1-a088-482971082dcc",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3440,
        928
      ],
      "id": "f2106896-484e-41e9-8bc2-051ce88c222c",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1MSjKBDgi3mWE99rSlWAK1XgSSSoYV62v",
          "mode": "list",
          "cachedResultName": "Content Entry.csv",
          "cachedResultUrl": "https://drive.google.com/file/d/1MSjKBDgi3mWE99rSlWAK1XgSSSoYV62v/view?usp=drivesdk"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1024,
        -560
      ],
      "id": "78cd78c2-4921-4af7-b01b-036682021892",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "lml9nJV2CfuBJkTv",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2704,
        240
      ],
      "id": "63beac09-7c3c-4f72-ad46-43f1559dec22",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "4mFG6JwySFJg6M6W",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "GENERATE TEXT": {
      "main": [
        [
          {
            "node": "Content Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GENERATE PROMPT": {
      "main": [
        [
          {
            "node": "OPENAI GENERATES IMAGE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OPENAI GENERATES IMAGE": {
      "main": [
        [
          {
            "node": "Find Business Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "GENERATE TEXT",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "GENERATE PROMPT",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Business Config": {
      "main": [
        [
          {
            "node": "Prepare Dynamic Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Dynamic Data": {
      "main": [
        [
          {
            "node": "Debug Logging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Business Folder": {
      "main": [
        [
          {
            "node": "Create Content Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Upload Data": {
      "main": [
        [
          {
            "node": "Google Drive Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Image Prompt": {
      "main": [
        []
      ]
    },
    "Debug Content Generation": {
      "main": [
        [
          {
            "node": "Prepare Research Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Content Folder": {
      "main": [
        [
          {
            "node": "Google Drive Create Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Google Doc Content": {
      "main": [
        [
          {
            "node": "Google Docs Create Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs Create Document": {
      "main": [
        [
          {
            "node": "Google Docs Add Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Notion Update": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive Create Folder": {
      "main": [
        [
          {
            "node": "Prepare Upload Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive Upload": {
      "main": [
        [
          {
            "node": "Download & Resize Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs Add Content": {
      "main": [
        [
          {
            "node": "Enhanced Notion Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "GENERATE SHORTFORM TEXT",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Download & Resize Images": {
      "main": [
        [
          {
            "node": "Download Universal Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Universal Image": {
      "main": [
        [
          {
            "node": "Download Square Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Square Image": {
      "main": [
        [
          {
            "node": "Upload Universal Image",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload Square Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Universal Image": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Upload Square Image": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Resized Images": {
      "main": [
        [
          {
            "node": "Prepare Google Doc Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Collect Resized Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling": {
      "main": [
        [
          {
            "node": "Debug Content Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Form Data": {
      "main": [
        [
          {
            "node": "Get Business Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Research Queries": {
      "main": [
        [
          {
            "node": "Tavily Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Research Results": {
      "main": [
        [
          {
            "node": "GENERATE TEXT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tavily Search": {
      "main": [
        [
          {
            "node": "Process Research Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Validation Check": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Build Shortform System Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GENERATE SHORTFORM TEXT": {
      "main": [
        [
          {
            "node": "GENERATE PROMPT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Shortform System Message": {
      "main": [
        [
          {
            "node": "GENERATE SHORTFORM TEXT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Logging": {
      "main": [
        [
          {
            "node": "Error Handling",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Process Form Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitInBatches": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "CSV Row Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSV Row Mapping": {
      "main": [
        [
          {
            "node": "On form submission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSV Parsing": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive CSV Reader": {
      "main": [
        [
          {
            "node": "CSV Parsing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        []
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "Google Drive CSV Reader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "GENERATE SHORTFORM TEXT",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a309e48e-3b32-43a0-b100-7d015f2cdfb3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a44da71e50fc9a6e7a6a138b723f7a7514d28d96ef739ef2e0ac8073ec3a6d99"
  },
  "id": "RPnsZ1Epc5MVGvRu",
  "tags": [
    {
      "createdAt": "2025-07-04T19:31:28.432Z",
      "updatedAt": "2025-07-04T19:31:28.432Z",
      "id": "AYcOhUXPsORts4eL",
      "name": "Social Media"
    },
    {
      "createdAt": "2025-07-04T19:57:21.668Z",
      "updatedAt": "2025-07-04T19:57:21.668Z",
      "id": "sifZUBrRJC0DzZkw",
      "name": "Ready"
    }
  ]
}