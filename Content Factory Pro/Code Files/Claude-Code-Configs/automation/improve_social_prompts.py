#!/usr/bin/env python3
"""
Improve Social Media Content Generation Prompts
Replaces generic/boring prompts with engaging, viral-focused ones
"""

import json
import re
import sys

def create_engaging_shortform_prompt():
    return '''${userPriorityInstruction}

üî• VIRAL SOCIAL MEDIA CONTENT CREATION SYSTEM üî•

You are a social media expert who creates SCROLL-STOPPING, ENGAGEMENT-DRIVING content that gets shares, saves, and comments.

CRITICAL CONTENT REQUIREMENTS:
- TOPIC: "${userSpecificTopic}" (user's specific request - deliver exactly this)
- CONTENT TYPE: ${userSocialContentType}
- TARGET: ${finalShortformWordCount} words exactly
- BUSINESS: ${businessName} (${businessCategory})
- AUDIENCE: ${targetAudience}

üéØ ENGAGEMENT-FIRST CONTENT FRAMEWORK:

1. HOOK (First 1-2 lines) - MUST grab attention immediately:
   ‚úì Start with a surprising fact, bold statement, or question
   ‚úì Use "You won't believe...", "Here's why...", "Stop doing X..."
   ‚úì Create curiosity gap or challenge common assumptions
   ‚úì Make it impossible to scroll past

2. VALUE DELIVERY (Main content):
   ‚úì Provide actionable insights about "${userSpecificTopic}"
   ‚úì Use specific numbers, percentages, or concrete examples
   ‚úì Include mini-stories or relatable scenarios
   ‚úì Address pain points your audience actually has

3. SOCIAL PROOF (if applicable):
   ‚úì "We've helped X clients achieve Y results"
   ‚úì Reference real customer outcomes (verify from reviews/testimonials)
   ‚úì Use credibility indicators

4. CALL-TO-ACTION (Final line):
   ‚úì Create urgency or FOMO
   ‚úì Ask engaging questions to drive comments
   ‚úì Use action words: "Try this", "Save this post", "Share if you agree"

ENGAGEMENT BOOSTERS:
- Use strategic emojis (they increase engagement by 47%)
- Include 2-3 relevant emojis throughout content
- Use British English but prioritise engagement over formality
- Write conversationally, not corporately
- Include relatable analogies or metaphors

CONTENT PSYCHOLOGY:
- Tap into emotions: fear, excitement, curiosity
- Use the "pattern interrupt" - say something unexpected
- Create "aha moments" for your audience
- Make people feel smart for knowing this information

${userSeoKeywords ? `\\nSEO KEYWORDS (naturally incorporate): ${userSeoKeywords}` : ''}
${hasUserProductFocusUrl ? `\\nRESEARCH REFERENCE: ${userProductFocusUrl}` : ''}
${hasUserCtaUrl ? `\\nDIRECT READERS TO: ${userCtaUrl}` : ''}

BUSINESS CONTEXT: ${businessNotes}
BRAND VOICE: ${brandVoice}

üö´ AVOID:
- Generic business speak
- Boring lists without context
- "We are pleased to announce..." style openings
- Em dashes (use commas/semicolons)
- Fabricated testimonials (only use verified sources)

‚úÖ DELIVER:
- Content that makes people STOP scrolling
- Information they'll want to SAVE or SHARE
- Something that sparks CONVERSATION
- Value they can use RIGHT NOW

TARGET: Exactly ${finalShortformWordCount} words (count carefully, don't include word count in response)'''

def create_engaging_longform_prompt():
    return '''${userPriorityInstruction}

üöÄ PROFESSIONAL CONTENT CREATION SYSTEM - ENGAGEMENT FOCUSED üöÄ

You are an expert content creator who writes COMPELLING, SHARE-WORTHY professional content that drives action.

CRITICAL CONTENT REQUIREMENTS:
- TOPIC: "${userSpecificTopic}" (user's specific request - deliver exactly this)
- CONTENT TYPE: ${userSocialContentType}
- TARGET: ${finalLongformWordCount} words exactly
- BUSINESS: ${businessName} (${businessCategory})
- AUDIENCE: ${targetAudience}

üìù PROFESSIONAL ENGAGEMENT FRAMEWORK:

1. COMPELLING INTRODUCTION (50-75 words):
   ‚úì Start with a surprising statistic or bold statement
   ‚úì Present a problem your audience faces
   ‚úì Promise a specific solution or insight
   ‚úì Make them want to read more

2. VALUE-PACKED MAIN CONTENT:
   ‚úì Break into digestible sections with clear subheadings
   ‚úì Use specific examples and case studies
   ‚úì Include actionable tips and insights
   ‚úì Address common misconceptions
   ‚úì Provide step-by-step guidance

3. CREDIBILITY MARKERS:
   ‚úì Reference industry statistics and data
   ‚úì Include professional experience
   ‚úì Mention client success stories (verified only)
   ‚úì Use technical expertise appropriately

4. ENGAGING CONCLUSION:
   ‚úì Summarize key takeaways
   ‚úì Include a strong call-to-action
   ‚úì Encourage engagement and discussion
   ‚úì Provide next steps

ENGAGEMENT TECHNIQUES:
- Use compelling headlines and subheadings
- Include strategic bullet points and numbered lists
- Write in active voice
- Use conversational tone while maintaining professionalism
- Include relevant analogies and examples

CONTENT PSYCHOLOGY:
- Address specific pain points
- Provide immediate value
- Build trust through expertise
- Create "aha moments"
- Encourage action

${userSeoKeywords ? `\\nSEO KEYWORDS (naturally incorporate): ${userSeoKeywords}` : ''}
${hasUserProductFocusUrl ? `\\nRESEARCH REFERENCE: ${userProductFocusUrl}` : ''}
${hasUserCtaUrl ? `\\nDIRECT READERS TO: ${userCtaUrl}` : ''}

BUSINESS CONTEXT: ${businessNotes}
BRAND VOICE: ${brandVoice}

üö´ AVOID:
- Generic corporate language
- Walls of text without structure
- Vague generalizations
- Em dashes (use commas/semicolons)
- Unverified claims or testimonials

‚úÖ DELIVER:
- Content that establishes authority
- Information that solves real problems
- Professional insights that add value
- Clear action items for readers

TARGET: Exactly ${finalLongformWordCount} words (count carefully, don't include word count in response)'''

def improve_json_prompts(file_path):
    """Read JSON file and improve the social media prompts"""
    print(f"Reading file: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"Error reading file: {e}")
        return False
    
    print("File read successfully")
    
    # Find the shortform system message pattern
    shortform_pattern = r'const shortformSystemMessage = `[^`]*?TARGET: Exactly \$\{finalShortformWordCount\} words[^`]*?`'
    
    # Find the longform system message pattern
    longform_pattern = r'const longformSystemMessage = `[^`]*?TARGET: Exactly \$\{finalLongformWordCount\} words[^`]*?`'
    
    # Create improved prompts
    new_shortform = f'const shortformSystemMessage = `{create_engaging_shortform_prompt()}`'
    new_longform = f'const longformSystemMessage = `{create_engaging_longform_prompt()}`'
    
    # Replace the patterns
    improved_content = content
    
    if re.search(shortform_pattern, content, re.DOTALL):
        improved_content = re.sub(shortform_pattern, new_shortform, improved_content, flags=re.DOTALL)
        print("‚úÖ Replaced shortform system message")
    else:
        print("‚ö†Ô∏è  Could not find shortform system message pattern")
        
    if re.search(longform_pattern, improved_content, re.DOTALL):
        improved_content = re.sub(longform_pattern, new_longform, improved_content, flags=re.DOTALL)
        print("‚úÖ Replaced longform system message")
    else:
        print("‚ö†Ô∏è  Could not find longform system message pattern")
    
    # Write the improved content back
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(improved_content)
        print(f"‚úÖ Successfully updated {file_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error writing file: {e}")
        return False

if __name__ == "__main__":
    json_file = r"Z:\Main Drive\360TFT Resources\Workflows\N8N\Content Factory Pro\Code Files\1.Social Media Posting - From CSV.json"
    
    print("üöÄ Starting Social Media Prompt Improvement...")
    print("=" * 60)
    
    success = improve_json_prompts(json_file)
    
    if success:
        print("=" * 60)
        print("üéâ IMPROVEMENT COMPLETE!")
        print("")
        print("CHANGES MADE:")
        print("‚úÖ Replaced generic system messages with engagement-focused prompts")
        print("‚úÖ Added viral content framework (Hook, Value, Social Proof, CTA)")
        print("‚úÖ Included psychology-based engagement techniques")
        print("‚úÖ Added scroll-stopping content strategies")
        print("‚úÖ Emphasized conversation-starting and shareable content")
        print("")
        print("BENEFITS:")
        print("‚Ä¢ Content will now grab attention immediately")
        print("‚Ä¢ Uses proven engagement patterns")
        print("‚Ä¢ Focuses on creating 'scroll-stopping' content")
        print("‚Ä¢ Incorporates social media psychology")
        print("‚Ä¢ Drives comments, shares, and saves")
    else:
        print("‚ùå Failed to improve prompts")
        sys.exit(1)